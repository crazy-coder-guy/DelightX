<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DelightX</title>
    <link rel="stylesheet" href="css/style.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat+Alternates:wght@100;400;700&display=swap" rel="stylesheet">
    <style>
       * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    
}

body, html {
    height: 100%;
    
}

.container {
    display: flex;
    height: 100vh; /* Full viewport height */
}

.column {
    height: 100%; /* Full height */
}

.black {
    position: fixed; /* Fixed positioning */
    width: 10%; /* Default width for desktop */
    background-color: rgb(255, 255, 255);
    overflow-y: auto; /* Enable vertical scrolling */
    padding: 15px; /* Add padding to the column */
    margin-left: -5%; /* Move the black column slightly to the left */
}

.green {
    margin-left: 10%; /* Leave space for the black column */
    height: 100%; /* Ensure full height */
    width: 85%; /* Adjusted width for product display */
    background-color: rgb(255, 255, 255);
    overflow-y: auto; /* Allow vertical scrolling */
    overflow-x: hidden; /* Hide horizontal overflow */
}

.product-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between; /* Space between cards */
}

.card, .skeleton-card {
    box-shadow: 0 2px 5px rgb(255, 255, 255); /* Add some shadow for aesthetics */
    margin: 5px; /* Reduced margin */
    padding: 5px; /* Reduced padding */
    border: 1px solid #ddd; /* Optional border */
    border-radius: 5px; /* Rounded corners */
    flex: 1 1 calc(16.66% - 10px); /* 6 cards per row on desktop (100% / 6 = 16.66%) */
}

/* Adjusting media query for mobile view */
@media (max-width: 768px) {
    .card, .skeleton-card {
        flex: 1 1 calc(50% - 10px); /* Increase card width to fit more on mobile */
    }
}

.category {
    box-shadow: 0 2px 5px rgb(255, 255, 255); /* Add some shadow for aesthetics */
    margin: 5px; /* Reduced margin */
    padding: 1px; /* Reduced padding */
    border: 10px solid #ddd; /* Optional border */
    border-radius: 5px; /* Rounded corners */
    flex: 1 1 calc(16.66% - 10px); /* 6 cards per row on desktop (100% / 6 = 16.66%) */
}


.product-card {
    background-color: white;
    width: 100%;
    border-radius: 10px;
    padding: 0; /* Removed padding */
    margin-bottom: 20px;
    box-shadow: 0 4px 8px rgb(255, 255, 255);
    text-decoration: none;
    color: inherit;
    display: block;
    width: 350px; /* Adjusted width for cards */
}

.card img {
    width: 100%; /* Fit image within the card */
    height: 110px; /* Increased height for images */
    object-fit: contain; /* Cover image without distortion */
    border-radius: 10px 10px 0 0; /* Match card style */
}
.card-body {
    line-height: 1;
    font-size: 0.875rem;
    padding: 5px; /* Removed padding */
    
}
.skeleton-loader {
    display: flex;
    flex-wrap: wrap; /* Allow skeleton cards to wrap */
    justify-content: space-between; /* Space between skeleton cards */
    width: 100%;
}

.skeleton-card {
    flex: 1 1 calc(23% - 10px); /* 4 cards per row on desktop */
    height: 200px; /* Increased height for skeleton cards */
    margin: 5px; /* Ensure consistent spacing */
    border-radius: 10px; /* Match product card radius */
    background: rgba(240, 240, 240, 0.8); /* Light gray with transparency */
    backdrop-filter: blur(10px); /* Blur effect for glassmorphism */
    position: relative; /* To position the pseudo-element */
    overflow: hidden; /* To contain the shimmer effect */
}

.skeleton-card::before {
    content: '';
    position: absolute;
    top: -50%; /* Start from above the card */
    left: -50%; /* Start from the left */
    width: 200%; /* Cover the entire card */
    height: 200%; /* Cover the entire card */
    background: linear-gradient(90deg, rgba(240, 240, 240, 0.4) 25%, rgba(255, 255, 255, 0.6) 50%, rgba(240, 240, 240, 0.4) 75%);
    background-size: 200% 100%;
    animation: shimmer 2s infinite; /* Adjust speed here */
    opacity: 0.6; /* Slightly transparent for effect */
}

@keyframes shimmer {
    0% {
        background-position: -200% 0; /* Start from left */
    }
    100% {
        background-position: 200% 0; /* Move to right */
    }
}

/* Reduced font sizes for product card text */
.product-card .card-title,
.product-card .qty-info,
.product-card .original-price,
.product-card .final-price {
    font-size: 0.8rem; /* Adjust font size */
}

.product-card .brand-name {
    font-weight: bold; /* Bold the brand name */
    color: black; /* Pure black color */
    font-size: 1rem
}

.card-title {
    font-weight: 600; /* Increased font weight */
    color: rgba(0, 0, 0, 0.8); /* Light black color */
    font-size: 1.2rem
}

.qty-container {
    justify-content: center; /* Center the buttons */
    display: flex; /* Use flexbox for alignment */
    align-items: center; /* Center vertically */
}

@media (max-width: 768px) {
    .black {
        width: 30%; /* Full width for mobile */
        padding: 0; /* Remove padding */
        margin-left: -5%; /* Adjust left margin for mobile */
    }
    .green {
        width: 100%; /* Adjust width for mobile */
        margin-left: 25%; /* Align to the left according to black column width */
    }
    .card, .skeleton-card {
        flex: 1 1 calc(50% - 10px); /* Increase card width to fit more on mobile */
    }
}

@media (min-width: 992px) {
    .bottom-nav {
        display: none; /* Hide bottom nav on larger screens */
    }
}
.card-img-top {
    width: 100%; /* Ensures the image fills the container */
    height: 200px; /* Set a fixed height as needed */
    object-fit: cover; /* Ensures the image covers the container without distortion */
    border-top-left-radius: 10px; /* Consistent border radius */
    border-top-right-radius: 10px; /* Consistent border radius */
}


.category-container {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 10px;
    padding: 10px 0;
}

.card-body {
    line-height: 1; /* Keep existing line height */
    font-size: 0.875rem;
    margin: 0;
}

.card-body h5 {
    text-align: left; /* Align product title to left */
    text-transform: uppercase; /* Make title uppercase */
    font-size: 0.8rem;
}

.qty-container {
    margin-top: 0;
    margin: 0;
}

.btn-primary {
    background-color: #347928;
    border: none;
    border-radius: 25px;
    transition: background-color 0.3s, transform 0.3s; /* Added transform for hover effect */
    padding: 10px ;
    margin-top: 10px;
}

.btn.add {
    background-color: #347928;
    color: #ffffff; /* Text color */
    border: none; /* Remove default border */
    border-radius: 4px; /* Optional: rounded corners */
    padding: 10px; /* Optional: padding for better spacing */
    font-size: 16px; /* Optional: font size */
}

.overflow-auto {
    overflow-x: hidden;
    white-space: nowrap;
}

.price-container {
    display: flex;
    align-items: center; /* Center items vertically */
    gap: 10px; /* Space between elements */
    margin-bottom: 0; /* Ensure no extra margin at the bottom */
}

.discount-amount {
    color: green; /* Green color for discount */
    font-size: 0.875rem; /* Adjust font size */
    line-height: 1; /* Ensure consistent line height */
}

.original-price {
    text-decoration: line-through;
    color: rgb(80, 80, 80);
    font-size: 0.875rem; /* Adjust font size */
    line-height: 1; /* Ensure consistent line height */
}

.final-price {
    color: green; /* Green color for final price */
    font-weight: bold;
    font-size: 0.875rem; /* Adjust font size */
    line-height: 1; /* Ensure consistent line height */
}

.card-title {
    font-size: 0.8em; /* Default font size */
    white-space: nowrap; /* Prevent text wrapping */
    overflow: hidden; /* Hide overflow */
    text-overflow: ellipsis; /* Add ellipsis for overflowing text */
}

.qty-info {
    margin-bottom: 10px;
}

.qty-container {
    display: flex;
    align-items: center; /* Center items vertically */
    margin: 0; /* Removed margin */
    width: 100%;
}

.qty-display-container {
    margin: 0 0px; /* Add margin for spacing */
    text-align: center; /* Center the text within the span */
    background-color: rgb(255, 255, 255); /* White background for the quantity display */
    padding: 1px; /* Add some padding for better spacing */
    border-radius: 4px; /* Optional: rounded corners */
}

.btn {
    margin: 0px; /* No margin between buttons */
    background-color: green; /* Green background for buttons */
    color: white; /* White text for buttons */
    border: none; /* Remove default border */
    border-radius: 5px; /* Optional: rounded corners */
}

.btn:hover {
    background-color: darkgreen; /* Darker green on hover */
}

.btn-add-to-cart {
    background-color: green; /* Green background */
    width: 100%;
    color: white; /* White text */
    border: none; /* No border */
    border-radius: 5px; /* Slightly rounded corners */
    padding: 10px 10px; /* Padding for better size */
    font-size: 12px; /* Font size */
    cursor: pointer; /* Pointer cursor on hover */
    transition: background-color 0.3s; /* Smooth background color transition */
    justify-items: center; /* Center button contents */
    margin: 0 auto; /* Center the button horizontally */
    display: flex; /* Flexbox for centering */
    align-items: center; /* Center vertically */
}
.top-category {
    margin-left: 15px; /* or use padding-left */
}

.btn-add-to-cart:hover {
    background-color: #218838; /* Darker green on hover */
}

/* Quantity button styles */
.qty-button {
    width: 40px; /* Fixed width for minus button */
}

.qty-button.add {
    width: 50px; /* Slightly larger width for add button */
}
    </style>

</head>
<body>

<nav class="navbar navbar-light bg-light d-lg-none sticky-top">
    <div class="container-fluid justify-content-between">
        <a class="navbar-brand" href="#">DelightX</a>
        <button class="btn btn-outline-secondary" type="button" aria-label="Search" data-bs-toggle="offcanvas" data-bs-target="#searchOffcanvas">
            <i class="fa-solid fa-magnifying-glass fa-fade"></i>
        </button>
    </div>
</nav>

<div class="offcanvas offcanvas-end offcanvas-full" tabindex="-1" id="searchOffcanvas" aria-labelledby="searchOffcanvasLabel">
    <div class="offcanvas-header">
        <h5 id="searchOffcanvasLabel">Search</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <input type="text" class="form-control" placeholder="Search for over 500 products" autofocus>
    </div>
</div>

<!-- Desktop Navbar -->
<nav class="navbar navbar-expand-lg navbar-light bg-light d-none d-lg-block sticky-top">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">DelightX</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="#">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Profile</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="moreDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        More
                    </a>
                    <ul class="dropdown-menu" aria-labelledby="moreDropdown">
                        <li><a class="dropdown-item" href="#">Settings</a></li>
                        <li><a class="dropdown-item" href="#">Help</a></li>
                    </ul>
                </li>
            </ul>
            <form class="d-flex">
                <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-outline-success me-2" type="submit">Search</button>
                <button class="btn btn-outline-secondary" type="button" aria-label="Cart">
                    <i class="fa-solid fa-cart-shopping fa-bounce"></i>
                </button>
            </form>
        </div>
    </div>
</nav>

<!-- Bottom Navigation for Mobile -->
<nav class="navbar navbar-light bg-light fixed-bottom d-lg-none bottom-nav">
    <div class="container-fluid justify-content-around">
        <a class="nav-link text-center" href="DelightX-Home.html">
            <i class="fas fa-home fa-lg"></i>
            <div>Home</div>
        </a>
        <a class="nav-link text-center" href="DelightX-Profile.html">
            <i class="fas fa-user fa-lg"></i>
            <div>Profile</div>
        </a>
        <a class="nav-link text-center" href="#">
            <i class="fas fa-ellipsis-h fa-lg"></i>
            <div>More</div>
        </a>
        <a class="nav-link text-center" href="DelightX-Cart.html">
            <i class="fas fa-shopping-cart fa-lg"></i>
            <div>Cart</div>
        </a>
    </div>
</nav>

<div class="container">
    <div class="column black">
        <h5 class="top-category">Categories</h5>
        <div class="card" onclick="fetchProductsByCategory('Pasta and Noodles')">
            <img src="https://cdn.zeptonow.com/production///tr:w-210,ar-225-333,pr-true,f-auto,q-80/cms/category/4b28a9a2-8714-455c-ad17-fa765bbc3576.png" alt="Pasta and Noodles">
        </div>
        <div class="card" onclick="fetchProductsByCategory('Spices and Seasonings')">
            <img src="https://cdn.zeptonow.com/production///tr:w-210,ar-225-333,pr-true,f-auto,q-80/cms/category/8d4d3977-5197-49d9-9867-8a670524e48b.png" alt="Masala & Dry Fruits">
        </div>
        <div class="card" onclick="fetchProductsByCategory('Snacks')">
            <img src="https://cdn.zeptonow.com/production///tr:w-210,ar-225-333,pr-true,f-auto,q-80/cms/category/ab241d87-da5b-4830-b38f-1a6cd30d0d41.png" alt="Snacks">
        </div>
    </div>
    
    <div class="column green">
        <div id="productDisplay" class="product-container">
            <div class="skeleton-loader">
                <!-- Skeleton loader content here -->
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.0.2/firebase-app.js";
    import { getDatabase, ref, get, child, set, remove } from "https://www.gstatic.com/firebasejs/9.0.2/firebase-database.js";
    import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.0.2/firebase-auth.js";

    const firebaseConfig = {
        apiKey: "AIzaSyC7IZ7BhQPOy7CfEQLuJTOxdrTybBZTFO8",
        authDomain: "delightx-in.firebaseapp.com",
        databaseURL: "https://delightx-in-default-rtdb.firebaseio.com",
        projectId: "delightx-in",
        storageBucket: "delightx-in.appspot.com",
        messagingSenderId: "554333595542",
        appId: "1:554333595542:web:d445cd0bea3f1483c21fb7"
    };

    const app = initializeApp(firebaseConfig);
    const database = getDatabase(app);
    const auth = getAuth(app);

    let currentUserUid = null;

    function showSkeletonLoader() {
        const productDisplay = document.getElementById('productDisplay');
        productDisplay.classList.add('loading');
    }

    function hideSkeletonLoader() {
        const productDisplay = document.getElementById('productDisplay');
        productDisplay.classList.remove('loading');
    }

    window.fetchProductsByCategory = async function(category) {
        if (!navigator.onLine) {
            console.error("Client is offline");
            return;
        }

        const dbRef = ref(database);
        get(child(dbRef, `products`)).then((snapshot) => {
            if (snapshot.exists()) {
                const products = snapshot.val();
                localStorage.setItem('products', JSON.stringify(products));
                const userLocation = JSON.parse(localStorage.getItem('userLocation'));
                if (userLocation) {
                    const { latitude, longitude } = userLocation;
                    fetchProductsForLocation(latitude, longitude, products, category);
                } else {
                    console.error("User location not found");
                }
            } else {
                console.error("No products found");
            }
        }).catch((error) => {
            hideSkeletonLoader();
            console.error("Error fetching products: ", error);
        });
    };

    async function fetchProductsForLocation(lat, lon, products, category) {
        showSkeletonLoader();
        const filteredProducts = [];

        for (const key in products) {
            const productLat = parseFloat(products[key].latitude);
            const productLon = parseFloat(products[key].longitude);
            const distance = calculateDistance(lat, lon, productLat, productLon);
            
            if (distance <= 1 && products[key].category === category) {
                const product = {
                    id: key,
                    availability: products[key].availability,
                    category: products[key].category,
                    city: products[key].city,
                    finalPrice: products[key].finalPrice,
                    imageURL: products[key].imageURL,
                    listingPrice: products[key].listingPrice,
                    originalPrice: products[key].originalPrice,
                    productName: products[key].productName,
                    productType: products[key].productType,
                    qtyUnit: products[key].qtyUnit,
                    quantity: products[key].quantity,
                    stockAvailable: products[key].stockAvailable,
                    timestamp: products[key].timestamp,
                };
                filteredProducts.push(product);
            }
        }

        await displayProducts(filteredProducts);
        hideSkeletonLoader();
    }

    function calculateDistance(lat1, lon1, lat2, lon2) {
        const R = 6371;
        const dLat = (lat2 - lat1) * Math.PI / 180;
        const dLon = (lon2 - lon1) * Math.PI / 180;
        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                  Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                  Math.sin(dLon / 2) * Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c;
    }

    async function displayProducts(products) {
        const productDisplay = document.getElementById('productDisplay');
        productDisplay.innerHTML = '';

        const imageLoadPromises = [];
        const cartItems = JSON.parse(localStorage.getItem('cartItems')) || {};

        for (const product of products) {
            const productCard = document.createElement('div');
            productCard.className = 'card product-card';
            productCard.style.width = '250px';

            const productImage = document.createElement('img');
            productImage.src = product.imageURL;
            productImage.className = 'card-img-top';
            productCard.appendChild(productImage);

            const productBody = document.createElement('div');
            productBody.className = 'card-body text-left';

            const productBrand = document.createElement('p');
            productBrand.className = 'card-title brand-name';
            productBrand.textContent = product.brandName;
            productBody.appendChild(productBrand);

            const productName = document.createElement('p');
            productName.className = 'card-title';
            productName.textContent = product.productName.toUpperCase();
            productBody.appendChild(productName);

            const qtyInfo = document.createElement('p');
            qtyInfo.className = 'qty-info';
            qtyInfo.textContent = `${product.quantity} ${product.qtyUnit}`; 
            productBody.appendChild(qtyInfo);

            const priceContainer = document.createElement('div');
            priceContainer.className = 'price-container mb-2';

            const originalPrice = parseFloat(product.originalPrice);
            const finalPrice = parseFloat(product.finalPrice);

            const originalPriceElement = document.createElement('span');
            originalPriceElement.className = 'original-price';
            originalPriceElement.innerHTML = `₹${Math.floor(originalPrice)}`;

            const finalPriceElement = document.createElement('span');
            finalPriceElement.className = 'final-price';
            finalPriceElement.innerHTML = `₹${Math.floor(finalPrice)}`;

            priceContainer.appendChild(originalPriceElement);
            priceContainer.appendChild(finalPriceElement);
            productBody.appendChild(priceContainer);

            const qtyContainer = document.createElement('div');
            qtyContainer.className = 'd-flex align-items-center qty-container mt-1';

            const qtyLabel = document.createElement('span');
            qtyLabel.textContent = 'QTY:';
            qtyLabel.className = 'me-1';

            const minusButton = document.createElement('button');
            const minusIcon = document.createElement('i');
            minusIcon.className = 'fa-solid fa-minus';
            minusIcon.style.fontSize = '0.5rem';
            minusButton.appendChild(minusIcon);
            minusButton.className = 'btn btn-secondary btn-sm me-1';
            minusButton.onclick = () => {
                let currentQty = parseInt(qtyDisplay.textContent);
                if (currentQty > 1) {
                    currentQty--;
                    qtyDisplay.textContent = currentQty;
                }
            };

            const qtyDisplay = document.createElement('span');
            qtyDisplay.textContent = '1';
            qtyDisplay.className = 'qty-display-container me-1';

            const plusButton = document.createElement('button');
            const plusIcon = document.createElement('i');
            plusIcon.className = 'fa-solid fa-plus';
            plusIcon.style.fontSize = '0.5rem';
            plusButton.appendChild(plusIcon);
            plusButton.className = 'btn btn-secondary btn-sm';
            plusButton.onclick = () => {
                let currentQty = parseInt(qtyDisplay.textContent);
                const maxQty = Math.min(5, product.stockAvailable);
                if (currentQty < maxQty) {
                    currentQty++;
                    qtyDisplay.textContent = currentQty;
                }
            };

            qtyContainer.appendChild(qtyLabel);
            qtyContainer.appendChild(minusButton);
            qtyContainer.appendChild(qtyDisplay);
            qtyContainer.appendChild(plusButton);
            productBody.appendChild(qtyContainer);

            const addToCartButton = document.createElement('button');
            addToCartButton.className = 'btn-add-to-cart mt-2';
            addToCartButton.style.display = 'flex';
            addToCartButton.style.alignItems = 'center';
            addToCartButton.style.justifyContent = 'center';

            const cartIcon = document.createElement('i');
            cartIcon.className = 'fa-solid fa-basket-shopping fa-fade me-2';

            addToCartButton.appendChild(cartIcon);
            const buttonText = document.createTextNode('Add to Cart');
            addToCartButton.appendChild(buttonText);

            if (cartItems[product.id]) {
                addToCartButton.style.backgroundColor = 'black';
                buttonText.textContent = 'Remove Item';
            }

            product.id = product.id || `product_${Math.random().toString(36).substr(2, 9)}`;

            addToCartButton.onclick = async () => {
                const quantity = parseInt(qtyDisplay.textContent);
                if (currentUserUid) {
                    if (cartItems[product.id]) {
                        await removeFromCart(product);
                        addToCartButton.style.backgroundColor = '';
                        buttonText.textContent = 'Add to Cart';
                        delete cartItems[product.id]; // Remove from local storage
                    } else {
                        await addToCart(product, quantity);
                        cartItems[product.id] = { ...product, quantity };
                        localStorage.setItem('cartItems', JSON.stringify(cartItems));
                        addToCartButton.style.backgroundColor = 'black';
                        buttonText.textContent = 'Remove Item';
                    }
                } else {
                    console.error('User is not logged in. Cannot add to cart.');
                }
            };

            productBody.appendChild(addToCartButton);
            productCard.appendChild(productBody);
            productDisplay.appendChild(productCard);

            const imgElement = productCard.querySelector('.card-img-top');
            const imageLoadPromise = new Promise((resolve) => {
                imgElement.onload = () => {
                    imgElement.style.display = 'block';
                    resolve();
                };
                imgElement.onerror = () => {
                    imgElement.style.display = 'block';
                    resolve();
                };
            });

            imageLoadPromises.push(imageLoadPromise);
        }

        await Promise.all(imageLoadPromises);
        hideSkeletonLoader();
    }

    onAuthStateChanged(auth, async (user) => {
        if (user) {
            currentUserUid = user.uid;
            console.log("User is logged in:", currentUserUid);

            const userLocationSnapshot = await get(ref(database, `users/${currentUserUid}/location`));
            if (userLocationSnapshot.exists()) {
                const userLocation = userLocationSnapshot.val();
                localStorage.setItem('userLocation', JSON.stringify(userLocation));
                fetchProductsByCategory('Pasta and Noodles');
            } else {
                promptForLocation();
            }
        } else {
            console.log("User is not logged in. Redirecting to index.html.");
            window.location.href = "index.html"; 
        }
    });

    async function addToCart(product, quantity) {
        if (!currentUserUid) {
            console.error('User is not logged in. Cannot add to cart.');
            return;
        }

        if (!product.id) {
            console.error('Product ID is undefined. Cannot add to cart.');
            return;
        }

        const cartRef = ref(database, `carts/${currentUserUid}/${product.id}`);
        const cartItem = {
            productName: product.productName,
            finalPrice: product.finalPrice,
            quantity: parseInt(quantity),
            totalPrice: (product.finalPrice * quantity).toFixed(2),
            imageURL: product.imageURL,
            productType: product.productType,
            originalPrice: product.originalPrice,
            qtyUnit: product.qtyUnit,
            availableQuantity: product.quantity
        };

        try {
            await set(cartRef, cartItem);
            console.log(`Added ${quantity} of ${product.productName} to cart with ID ${product.id}.`);
        } catch (error) {
            console.error('Error adding item to cart:', error);
        }
    }

    async function removeFromCart(product) {
        if (!currentUserUid) {
            console.error('User is not logged in. Cannot remove from cart.');
            return;
        }

        const cartRef = ref(database, `carts/${currentUserUid}/${product.id}`);
         // Remove item from local storage
         const cartItems = JSON.parse(localStorage.getItem('cartItems')) || {};
        delete cartItems[product.id]; // Remove the item from local storage
        localStorage.setItem('cartItems', JSON.stringify(cartItems)); // Update local storage
        try {
            await remove(cartRef);
            console.log(`Removed ${product.productName} from cart with ID ${product.id}.`);
        } catch (error) {
            console.error('Error removing item from cart:', error);
        }
    }
</script>

</body>
</html>








<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DelightX</title>
    <link rel="stylesheet" href="css/style.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat+Alternates:wght@100;400;700&display=swap" rel="stylesheet">
    <style>
       * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    
}

body, html {
    height: 100%;
    
}

.container {
    display: flex;
    height: 100vh; /* Full viewport height */
}

.column {
    height: 100%; /* Full height */
}

.black {
    position: fixed; /* Fixed positioning */
    width: 10%; /* Default width for desktop */
    background-color: rgb(246, 255, 242);
    overflow-y: auto; /* Enable vertical scrolling */
    padding: 15px; /* Add padding to the column */
    margin-left: -5%; /* Move the black column slightly to the left */
}

.green {
    margin-left: 10%; /* Leave space for the black column */
    height: 100%; /* Ensure full height */
    width: 85%; /* Adjusted width for product display */
    background-color: rgb(255, 255, 255);
    overflow-y: auto; /* Allow vertical scrolling */
    overflow-x: hidden; /* Hide horizontal overflow */
}

.product-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between; /* Space between cards */
}

.card, .skeleton-card {
    box-shadow: 0 2px 5px rgb(255, 255, 255); /* Add some shadow for aesthetics */
    margin: 5px; /* Reduced margin */
    padding: 5px; /* Reduced padding */
    border: 1px solid #ddd; /* Optional border */
    border-radius: 5px; /* Rounded corners */
    flex: 1 1 calc(16.66% - 10px); /* 6 cards per row on desktop (100% / 6 = 16.66%) */
}

/* Adjusting media query for mobile view */
@media (max-width: 768px) {
    .card, .skeleton-card {
        flex: 1 1 calc(50% - 10px); /* Increase card width to fit more on mobile */
    }
}

.category {
    box-shadow: 0 2px 5px rgb(255, 255, 255); /* Add some shadow for aesthetics */
    margin: 5px; /* Reduced margin */
    padding: 1px; /* Reduced padding */
    border: 10px solid #ddd; /* Optional border */
    border-radius: 5px; /* Rounded corners */
    flex: 1 1 calc(16.66% - 10px); /* 6 cards per row on desktop (100% / 6 = 16.66%) */
}


.product-card {
    background-color: white;
    width: 100%;
    border-radius: 10px;
    padding: 0; /* Removed padding */
    margin-bottom: 20px;
    box-shadow: 0 4px 8px rgb(255, 255, 255);
    text-decoration: none;
    color: inherit;
    display: block;
    width: 350px; /* Adjusted width for cards */
}

.card img {
    width: 100%; /* Fit image within the card */
    height: 110px; /* Increased height for images */
    object-fit: contain; /* Cover image without distortion */
    border-radius: 10px 10px 0 0; /* Match card style */
}
.card-body {
    line-height: 1;
    font-size: 0.875rem;
    padding: 5px; /* Removed padding */
    
}
.skeleton-loader {
    display: flex;
    flex-wrap: wrap; /* Allow skeleton cards to wrap */
    justify-content: space-between; /* Space between skeleton cards */
    width: 100%;
}

.skeleton-card {
    flex: 1 1 calc(23% - 10px); /* 4 cards per row on desktop */
    height: 200px; /* Increased height for skeleton cards */
    margin: 5px; /* Ensure consistent spacing */
    border-radius: 10px; /* Match product card radius */
    background: #D6EFD8;
    backdrop-filter: blur(10px); /* Blur effect for glassmorphism */
    position: relative; /* To position the pseudo-element */
    overflow: hidden; /* To contain the shimmer effect */
}

.skeleton-card::before {
    content: '';
    position: absolute;
    top: -50%; /* Start from above the card */
    left: -50%; /* Start from the left */
    width: 200%; /* Cover the entire card */
    height: 200%; /* Cover the entire card */
    background: linear-gradient(90deg, rgba(240, 240, 240, 0.4) 25%, rgba(255, 255, 255, 0.6) 50%, rgba(240, 240, 240, 0.4) 75%);
    background-size: 200% 100%;
    animation: shimmer 2s infinite; /* Adjust speed here */
    opacity: 0.6; /* Slightly transparent for effect */
}

@keyframes shimmer {
    0% {
        background-position: -200% 0; /* Start from left */
    }
    100% {
        background-position: 200% 0; /* Move to right */
    }
}

/* Reduced font sizes for product card text */
.product-card .card-title,
.product-card .qty-info,
.product-card .original-price,
.product-card .final-price {
    font-size: 0.8rem; /* Adjust font size */
}

.product-card .brand-name {
    font-weight: bold; /* Bold the brand name */
    color: black; /* Pure black color */
    font-size: 1rem
}

.card-title {
    font-weight: 600; /* Increased font weight */
    color: rgba(0, 0, 0, 0.8); /* Light black color */
    font-size: 1.2rem
}

.qty-container {
    justify-content: center; /* Center the buttons */
    display: flex; /* Use flexbox for alignment */
    align-items: center; /* Center vertically */
}

@media (max-width: 768px) {
    .black {
        width: 30%; /* Full width for mobile */
        padding: 0; /* Remove padding */
        margin-left: -5%; /* Adjust left margin for mobile */
    }
    .green {
        width: 100%; /* Adjust width for mobile */
        margin-left: 25%; /* Align to the left according to black column width */
    }
    .card, .skeleton-card {
        flex: 1 1 calc(50% - 10px); /* Increase card width to fit more on mobile */
    }
}

@media (min-width: 992px) {
    .bottom-nav {
        display: none; /* Hide bottom nav on larger screens */
    }
}
.card-img-top {
    width: 100%; /* Ensures the image fills the container */
    height: 200px; /* Set a fixed height as needed */
    object-fit: cover; /* Ensures the image covers the container without distortion */
    border-top-left-radius: 10px; /* Consistent border radius */
    border-top-right-radius: 10px; /* Consistent border radius */
}


.category-container {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 10px;
    padding: 10px 0;
}

.card-body {
    line-height: 1; /* Keep existing line height */
    font-size: 0.875rem;
    margin: 0;
}

.card-body h5 {
    text-align: left; /* Align product title to left */
    text-transform: uppercase; /* Make title uppercase */
    font-size: 0.8rem;
}

.qty-container {
    margin-top: 0;
    margin: 0;
}

.btn-primary {
    background-color: #347928;
    border: none;
    border-radius: 25px;
    transition: background-color 0.3s, transform 0.3s; /* Added transform for hover effect */
    padding: 10px ;
    margin-top: 10px;
}

.btn.add {
    background-color: #347928;
    color: #ffffff; /* Text color */
    border: none; /* Remove default border */
    border-radius: 4px; /* Optional: rounded corners */
    padding: 10px; /* Optional: padding for better spacing */
    font-size: 16px; /* Optional: font size */
}

.overflow-auto {
    overflow-x: hidden;
    white-space: nowrap;
}

.price-container {
    display: flex;
    align-items: center; /* Center items vertically */
    gap: 10px; /* Space between elements */
    margin-bottom: 0; /* Ensure no extra margin at the bottom */
}

.discount-amount {
    color: green; /* Green color for discount */
    font-size: 0.875rem; /* Adjust font size */
    line-height: 1; /* Ensure consistent line height */
}

.original-price {
    text-decoration: line-through;
    color: rgb(80, 80, 80);
    font-size: 0.875rem; /* Adjust font size */
    line-height: 1; /* Ensure consistent line height */
}

.final-price {
    color: green; /* Green color for final price */
    font-weight: bold;
    font-size: 0.875rem; /* Adjust font size */
    line-height: 1; /* Ensure consistent line height */
}

.card-title {
    font-size: 0.8em; /* Default font size */
    white-space: nowrap; /* Prevent text wrapping */
    overflow: hidden; /* Hide overflow */
    text-overflow: ellipsis; /* Add ellipsis for overflowing text */
}

.qty-info {
    margin-bottom: 10px;
}

.qty-container {
    display: flex;
    align-items: center; /* Center items vertically */
    margin: 0; /* Removed margin */
    width: 100%;
}

.qty-display-container {
    margin: 0 0px; /* Add margin for spacing */
    text-align: center; /* Center the text within the span */
    background-color: rgb(255, 255, 255); /* White background for the quantity display */
    padding: 1px; /* Add some padding for better spacing */
    border-radius: 4px; /* Optional: rounded corners */
}

.btn {
    margin: 0px; /* No margin between buttons */
    background-color: green; /* Green background for buttons */
    color: white; /* White text for buttons */
    border: none; /* Remove default border */
    border-radius: 5px; /* Optional: rounded corners */
}

.btn:hover {
    background-color: darkgreen; /* Darker green on hover */
}

.btn-add-to-cart {
    background-color: green; /* Green background */
    width: 100%;
    color: white; /* White text */
    border: none; /* No border */
    border-radius: 5px; /* Slightly rounded corners */
    padding: 10px 10px; /* Padding for better size */
    font-size: 12px; /* Font size */
    cursor: pointer; /* Pointer cursor on hover */
    transition: background-color 0.3s; /* Smooth background color transition */
    justify-items: center; /* Center button contents */
    margin: 0 auto; /* Center the button horizontally */
    display: flex; /* Flexbox for centering */
    align-items: center; /* Center vertically */
}
.top-category {
    margin-left: 15px; /* or use padding-left */
}

.btn-add-to-cart:hover {
    background-color: #218838; /* Darker green on hover */
}

/* Quantity button styles */
.qty-button {
    width: 40px; /* Fixed width for minus button */
}

.qty-button.add {
    width: 50px; /* Slightly larger width for add button */
}
    </style>

</head>
<body>

<nav class="navbar navbar-light bg-light d-lg-none sticky-top">
    <div class="container-fluid justify-content-between">
        <a class="navbar-brand" href="#">DelightX</a>
        <button class="btn btn-outline-secondary" type="button" aria-label="Search" data-bs-toggle="offcanvas" data-bs-target="#searchOffcanvas">
            <i class="fa-solid fa-magnifying-glass fa-fade"></i>
        </button>
    </div>
</nav>

<div class="offcanvas offcanvas-end offcanvas-full" tabindex="-1" id="searchOffcanvas" aria-labelledby="searchOffcanvasLabel">
    <div class="offcanvas-header">
        <h5 id="searchOffcanvasLabel">Search</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <input type="text" class="form-control" placeholder="Search for over 500 products" autofocus>
    </div>
</div>

<!-- Desktop Navbar -->
<nav class="navbar navbar-expand-lg navbar-light bg-light d-none d-lg-block sticky-top">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">DelightX</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="#">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Profile</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="moreDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        More
                    </a>
                    <ul class="dropdown-menu" aria-labelledby="moreDropdown">
                        <li><a class="dropdown-item" href="#">Settings</a></li>
                        <li><a class="dropdown-item" href="#">Help</a></li>
                    </ul>
                </li>
            </ul>
            <form class="d-flex">
                <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-outline-success me-2" type="submit">Search</button>
                <button class="btn btn-outline-secondary" type="button" aria-label="Cart">
                    <i class="fa-solid fa-cart-shopping fa-bounce"></i>
                </button>
            </form>
        </div>
    </div>
</nav>

<!-- Bottom Navigation for Mobile -->
<nav class="navbar navbar-light bg-light fixed-bottom d-lg-none bottom-nav">
    <div class="container-fluid justify-content-around">
        <a class="nav-link text-center" href="DelightX-Home.html">
            <i class="fas fa-home fa-lg"></i>
            <div>Home</div>
        </a>
        <a class="nav-link text-center" href="DelightX-Profile.html">
            <i class="fas fa-user fa-lg"></i>
            <div>Profile</div>
        </a>
        <a class="nav-link text-center" href="#">
            <i class="fas fa-ellipsis-h fa-lg"></i>
            <div>More</div>
        </a>
        <a class="nav-link text-center" href="DelightX-Cart.html">
            <i class="fas fa-shopping-cart fa-lg"></i>
            <div>Cart</div>
        </a>
    </div>
</nav>

<div class="container">
    <div class="column black">
        <h5 class="top-category">Categories</h5>
        <div class="card" onclick="fetchProductsByCategory('Pasta and Noodles')">
            <img src="https://cdn.zeptonow.com/production///tr:w-210,ar-225-333,pr-true,f-auto,q-80/cms/category/4b28a9a2-8714-455c-ad17-fa765bbc3576.png" alt="Pasta and Noodles">
        </div>
        <div class="card" onclick="fetchProductsByCategory('Spices and Seasonings')">
            <img src="https://cdn.zeptonow.com/production///tr:w-210,ar-225-333,pr-true,f-auto,q-80/cms/category/8d4d3977-5197-49d9-9867-8a670524e48b.png" alt="Masala & Dry Fruits">
        </div>
        <div class="card" onclick="fetchProductsByCategory('Snacks')">
            <img src="https://cdn.zeptonow.com/production///tr:w-210,ar-225-333,pr-true,f-auto,q-80/cms/category/ab241d87-da5b-4830-b38f-1a6cd30d0d41.png" alt="Snacks">
        </div>
    </div>
    
    <div class="column green">
        <div id="carouselExampleIndicators " class="carousel slide mt-1 " data-bs-ride="carousel">
            <div class="carousel-indicators">
              <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
              <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>
              <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" aria-label="Slide 3"></button>
            </div>
            <div class="carousel-inner">
              <div class="carousel-item active">
                <img src="https://cdn.zeptonow.com/production///tr:w-640,ar-970-560,pr-true,f-auto,q-80/inventory/banner/bd6d5804-7dac-4278-9cc5-2bdd509f4fec.png" class="d-block w-100" alt="...">
              </div>
              <div class="carousel-item">
                <img src="https://cdn.zeptonow.com/production///tr:w-640,ar-969-559,pr-true,f-auto,q-80/inventory/banner/fdee09b3-17de-4af0-b340-1d7c33a3aa93.png" class="d-block w-100" alt="...">
              </div>
              <div class="carousel-item">
                <img src="https://cdn.zeptonow.com/production///tr:w-640,ar-969-558,pr-true,f-auto,q-80/inventory/banner/c93ff78f-a583-497e-931e-ad3b4f7cd9e5.png" class="d-block w-100" alt="...">
              </div>
            </div>
            
          </div>
        <div id="productDisplay" class="product-container">
            <div class="skeleton-loader">
                <!-- Skeleton loader content here -->
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
                <div class="skeleton-card"></div>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.0.2/firebase-app.js";
    import { getDatabase, ref, get, child, set, remove } from "https://www.gstatic.com/firebasejs/9.0.2/firebase-database.js";
    import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.0.2/firebase-auth.js";

    const firebaseConfig = {
        apiKey: "AIzaSyC7IZ7BhQPOy7CfEQLuJTOxdrTybBZTFO8",
        authDomain: "delightx-in.firebaseapp.com",
        databaseURL: "https://delightx-in-default-rtdb.firebaseio.com",
        projectId: "delightx-in",
        storageBucket: "delightx-in.appspot.com",
        messagingSenderId: "554333595542",
        appId: "1:554333595542:web:d445cd0bea3f1483c21fb7"
    };

    const app = initializeApp(firebaseConfig);
    const database = getDatabase(app);
    const auth = getAuth(app);

    let currentUserUid = null;

    function showSkeletonLoader() {
        const productDisplay = document.getElementById('productDisplay');
        productDisplay.classList.add('loading');
    }

    function hideSkeletonLoader() {
        const productDisplay = document.getElementById('productDisplay');
        productDisplay.classList.remove('loading');
    }

    window.fetchProductsByCategory = async function(category) {
        if (!navigator.onLine) {
            console.error("Client is offline");
            return;
        }

        const dbRef = ref(database);
        get(child(dbRef, `products`)).then((snapshot) => {
            if (snapshot.exists()) {
                const products = snapshot.val();
                localStorage.setItem('products', JSON.stringify(products));
                const userLocation = JSON.parse(localStorage.getItem('userLocation'));
                if (userLocation) {
                    const { latitude, longitude } = userLocation;
                    fetchProductsForLocation(latitude, longitude, products, category);
                } else {
                    console.error("User location not found");
                }
            } else {
                console.error("No products found");
            }
        }).catch((error) => {
            hideSkeletonLoader();
            console.error("Error fetching products: ", error);
        });
    };

    async function fetchProductsForLocation(lat, lon, products, category) {
        showSkeletonLoader();
        const filteredProducts = [];

        for (const key in products) {
            const productLat = parseFloat(products[key].latitude);
            const productLon = parseFloat(products[key].longitude);
            const distance = calculateDistance(lat, lon, productLat, productLon);
            
            if (distance <= 1 && products[key].category === category) {
                const product = {
                    id: key,
                    availability: products[key].availability,
                    category: products[key].category,
                    city: products[key].city,
                    finalPrice: products[key].finalPrice,
                    imageURL: products[key].imageURL,
                    listingPrice: products[key].listingPrice,
                    originalPrice: products[key].originalPrice,
                    productName: products[key].productName,
                    productType: products[key].productType,
                    qtyUnit: products[key].qtyUnit,
                    quantity: products[key].quantity,
                    stockAvailable: products[key].stockAvailable,
                    timestamp: products[key].timestamp,
                };
                filteredProducts.push(product);
            }
        }

        await displayProducts(filteredProducts);
        hideSkeletonLoader();
    }

    function calculateDistance(lat1, lon1, lat2, lon2) {
        const R = 6371;
        const dLat = (lat2 - lat1) * Math.PI / 180;
        const dLon = (lon2 - lon1) * Math.PI / 180;
        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                  Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                  Math.sin(dLon / 2) * Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c;
    }

    async function displayProducts(products) {
        const productDisplay = document.getElementById('productDisplay');
        productDisplay.innerHTML = '';

        const imageLoadPromises = [];
        const cartItems = JSON.parse(localStorage.getItem('cartItems')) || {};

        for (const product of products) {
            const productCard = document.createElement('div');
            productCard.className = 'card product-card';
            productCard.style.width = '250px';

            const productImage = document.createElement('img');
            productImage.src = product.imageURL;
            productImage.className = 'card-img-top';
            productCard.appendChild(productImage);

            const productBody = document.createElement('div');
            productBody.className = 'card-body text-left';

            const productBrand = document.createElement('p');
            productBrand.className = 'card-title brand-name';
            productBrand.textContent = product.brandName;
            productBody.appendChild(productBrand);

            const productName = document.createElement('p');
            productName.className = 'card-title';
            productName.textContent = product.productName.toUpperCase();
            productBody.appendChild(productName);

            const qtyInfo = document.createElement('p');
            qtyInfo.className = 'qty-info';
            qtyInfo.textContent = `${product.quantity} ${product.qtyUnit}`; 
            productBody.appendChild(qtyInfo);

            const priceContainer = document.createElement('div');
            priceContainer.className = 'price-container mb-2';

            const originalPrice = parseFloat(product.originalPrice);
            const finalPrice = parseFloat(product.finalPrice);

            const originalPriceElement = document.createElement('span');
            originalPriceElement.className = 'original-price';
            originalPriceElement.innerHTML = `₹${Math.floor(originalPrice)}`;

            const finalPriceElement = document.createElement('span');
            finalPriceElement.className = 'final-price';
            finalPriceElement.innerHTML = `₹${Math.floor(finalPrice)}`;

            priceContainer.appendChild(originalPriceElement);
            priceContainer.appendChild(finalPriceElement);
            productBody.appendChild(priceContainer);

            const qtyContainer = document.createElement('div');
            qtyContainer.className = 'd-flex align-items-center qty-container mt-1';

            const qtyLabel = document.createElement('span');
            qtyLabel.textContent = 'QTY:';
            qtyLabel.className = 'me-1';

            const qtyDisplay = document.createElement('span');
qtyDisplay.textContent = '1';
qtyDisplay.className = 'qty-display-container me-1';
// Function to check the initial quantity in the cart
const checkInitialQuantity = async () => {
    if (!currentUserUid) {
        console.error('User is not logged in. Cannot check cart quantity.');
        return;
    }

    const cartRef = ref(database, `carts/${currentUserUid}/${product.id}`);
    try {
        const cartSnapshot = await get(cartRef);
        if (cartSnapshot.exists()) {
            const cartItem = cartSnapshot.val();
            qtyDisplay.textContent = cartItem.quantity; // Set the quantity display to the stored quantity
        } else {
            qtyDisplay.textContent = '1'; // Default to 1 if no item in cart
        }
    } catch (error) {
        console.error('Error fetching cart quantity:', error);
    }
};

// Call the function to check the initial quantity on load
checkInitialQuantity();

// Existing minus and plus button functionality
const minusButton = document.createElement('button');
const minusIcon = document.createElement('i');
minusIcon.className = 'fa-solid fa-minus';
minusIcon.style.fontSize = '0.5rem';
minusButton.appendChild(minusIcon);
minusButton.className = 'btn btn-secondary btn-sm me-1';
minusButton.onclick = async () => {
    let currentQty = parseInt(qtyDisplay.textContent);
    if (currentQty > 1) {
        currentQty--;
        qtyDisplay.textContent = currentQty;
        await updateCartQuantity(product, currentQty);
    }
};

const plusButton = document.createElement('button');
const plusIcon = document.createElement('i');
plusIcon.className = 'fa-solid fa-plus';
plusIcon.style.fontSize = '0.5rem';
plusButton.appendChild(plusIcon);
plusButton.className = 'btn btn-secondary btn-sm';
plusButton.onclick = async () => {
    let currentQty = parseInt(qtyDisplay.textContent);
    const maxQty = Math.min(5, product.stockAvailable);
    if (currentQty < maxQty) {
        currentQty++;
        qtyDisplay.textContent = currentQty;
        await updateCartQuantity(product, currentQty);
    }
};

// Function to update the cart quantity in Firebase
async function updateCartQuantity(product, quantity) {
    if (!currentUserUid) {
        console.error('User is not logged in. Cannot update cart quantity.');
        return;
    }

    const cartRef = ref(database, `carts/${currentUserUid}/${product.id}`);
    try {
        const cartItemSnapshot = await get(cartRef);
        if (cartItemSnapshot.exists()) {
            const cartItem = cartItemSnapshot.val();
            cartItem.quantity = quantity;
            cartItem.totalPrice = (cartItem.finalPrice * quantity).toFixed(2);
            await set(cartRef, cartItem); // Update cart item
            console.log(`Updated ${product.productName} quantity to ${quantity}.`);
        }
    } catch (error) {
        console.error('Error updating item quantity in cart:', error);
    }
};



            qtyContainer.appendChild(qtyLabel);
            qtyContainer.appendChild(minusButton);
            qtyContainer.appendChild(qtyDisplay);
            qtyContainer.appendChild(plusButton);
            productBody.appendChild(qtyContainer);

            const addToCartButton = document.createElement('button');
addToCartButton.className = 'btn-add-to-cart mt-2';
addToCartButton.style.display = 'flex';
addToCartButton.style.alignItems = 'center';
addToCartButton.style.justifyContent = 'center';

const cartIcon = document.createElement('i');
cartIcon.className = 'fa-solid fa-basket-shopping fa-fade me-2';
addToCartButton.appendChild(cartIcon);

const buttonText = document.createTextNode('Add to Cart');
addToCartButton.appendChild(buttonText);

// Ensure product.id is set
product.id = product.id || `product_${Math.random().toString(36).substr(2, 9)}`;

// Function to check initial button state
const checkCartStatus = async () => {
    const cartRef = ref(database, `carts/${currentUserUid}/${product.id}`);
    const cartSnapshot = await get(cartRef);
    if (cartSnapshot.exists()) {
        addToCartButton.style.backgroundColor = 'black';
        buttonText.textContent = 'Remove Item';
    }
};

// Call the function to check the cart status on load
checkCartStatus();

// Click event for addToCartButton
addToCartButton.onclick = async () => {
    const quantity = parseInt(qtyDisplay.textContent);
    if (currentUserUid) {
        try {
            const cartRef = ref(database, `carts/${currentUserUid}/${product.id}`);
            const cartSnapshot = await get(cartRef);
            if (cartSnapshot.exists()) {
                // Item exists in Firebase cart, remove it
                await removeFromCart(product);
                addToCartButton.style.backgroundColor = '';
                buttonText.textContent = 'Add to Cart';
            } else {
                // Check if the product is still available in Firebase
                const productRef = ref(database, `products/${product.id}`);
                const productSnapshot = await get(productRef);
                
                if (productSnapshot.exists() && productSnapshot.val().quantity > 0) {
                    // Item is available, add it to cart
                    await addToCart(product, quantity);
                    addToCartButton.style.backgroundColor = 'black';
                    buttonText.textContent = 'Remove Item';
                } else {
                    console.error('Product is not available for adding to cart.');
                    alert('This item is currently unavailable.');
                }
            }
        } catch (error) {
            console.error('Error checking cart status:', error);
        }
    } else {
        console.error('User is not logged in. Cannot add to cart.');
    }
};

            productBody.appendChild(addToCartButton);
            productCard.appendChild(productBody);
            productDisplay.appendChild(productCard);

            const imgElement = productCard.querySelector('.card-img-top');
            const imageLoadPromise = new Promise((resolve) => {
                imgElement.onload = () => {
                    imgElement.style.display = 'block';
                    resolve();
                };
                imgElement.onerror = () => {
                    imgElement.style.display = 'block';
                    resolve();
                };
            });

            imageLoadPromises.push(imageLoadPromise);
        }

        await Promise.all(imageLoadPromises);
        hideSkeletonLoader();
    }

    onAuthStateChanged(auth, async (user) => {
        if (user) {
            currentUserUid = user.uid;
            console.log("User is logged in:", currentUserUid);

            const userLocationSnapshot = await get(ref(database, `users/${currentUserUid}/location`));
            if (userLocationSnapshot.exists()) {
                const userLocation = userLocationSnapshot.val();
                localStorage.setItem('userLocation', JSON.stringify(userLocation));
                fetchProductsByCategory('Pasta and Noodles');
            } else {
                promptForLocation();
            }
        } else {
            console.log("User is not logged in. Redirecting to index.html.");
            window.location.href = "index.html"; 
        }
    });

    async function addToCart(product, quantity) {
    if (!currentUserUid) {
        console.error('User is not logged in. Cannot add to cart.');
        return;
    }

    if (!product.id) {
        console.error('Product ID is undefined. Cannot add to cart.');
        return;
    }

    const cartRef = ref(database, `carts/${currentUserUid}/${product.id}`);
    const cartItem = {
        productName: product.productName,
        finalPrice: product.finalPrice,
        quantity: parseInt(quantity),
        totalPrice: (product.finalPrice * quantity).toFixed(2),
        imageURL: product.imageURL,
        productType: product.productType,
        originalPrice: product.originalPrice,
        qtyUnit: product.qtyUnit,
        availableQuantity: product.quantity
    };

    try {
        await set(cartRef, cartItem);
        console.log(`Added ${quantity} of ${product.productName} to cart with ID ${product.id}.`);
    } catch (error) {
        console.error('Error adding item to cart:', error);
    }
}


    async function removeFromCart(product) {
        if (!currentUserUid) {
            console.error('User is not logged in. Cannot remove from cart.');
            return;
        }

        const cartRef = ref(database, `carts/${currentUserUid}/${product.id}`);
         // Remove item from local storage
         const cartItems = JSON.parse(localStorage.getItem('cartItems')) || {};
        delete cartItems[product.id]; // Remove the item from local storage
        localStorage.setItem('cartItems', JSON.stringify(cartItems)); // Update local storage
        try {
            await remove(cartRef);
            console.log(`Removed ${product.productName} from cart with ID ${product.id}.`);
        } catch (error) {
            console.error('Error removing item from cart:', error);
        }
    }
</script>

</body>
</html>



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DelightX</title>
    <link rel="stylesheet" href="css/style.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat+Alternates:wght@100;400;700&display=swap" rel="stylesheet">
    <style>
       
       body {
        background-color: #ffffff;
        font-family:  "Montserrat", sans-serif;
    }
    .navbar-brand {
font-family: "Righteous", sans-serif !important;
}
    button.qty-btn {
    width: 30px; /* Fixed width for buttons */
    margin: 5px; /* No margin between buttons */
    background-color: green; /* Green background for buttons */
    color: white; /* White text for buttons */
    border: none; /* Remove default border */
    border-radius: 4px; /* Optional: rounded corners */
    transition: background-color 0.2s; /* Smooth transition */
}
button.qty-btn:hover {
    background-color: darkgreen; /* Darker green on hover */
}
button.qty-btn:active {
    background-color: darkgreen; /* Keep darker green on click */
}
button.qty-btn:disabled {
    background-color: #4a4848; /* Disabled button color */
    cursor: not-allowed; /* Change cursor style */
}
        .card {
            border: none;
            border-radius: 12px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        .card-img-top {
            border-radius: 12px;
            object-fit: contain;
            height: 80px;
        }
        .total-price {
            font-size: 1rem;
            font-weight: bold;
            color: #007bff;
        }
        .delete-btn {
            cursor: pointer;
            color: red;
            font-size: 0.9rem;
        }
        .price-text {
            font-size: 0.9rem;
        }
        .bg-light-gray {
            background-color: #ffffff;
        }
        .section-title {
            font-weight: 600;
            color: #343a40;
        }
        .price-details {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            padding: 15px;
        }
        .discount-price, .total-amount {
            color: green;
            font-weight: bold;
        }
        .amount-value {
            color: rgb(0, 0, 0);
            font-weight: 600;
        }
        @media (max-width: 576px) {
            h2 {
                font-size: 1.5rem;
                text-align: center; /* Center title on mobile */
            }
            .total-price {
                font-size: 1rem;
            }
            .delete-btn {
                font-size: 1rem;
            }
            .card-img-top {
                height: 60px;
            }
            .price-details {
                padding: 10px; /* Adjust padding for mobile */
            }
            .scrollable-column {
                padding: 5px; /* Less padding for mobile */
            }
            .bottom-nav a {
                font-size: 14px; /* Smaller font size for mobile */
            }
        }
        @media (max-width: 768px) {
            .bottom-nav {
                display: flex;
                justify-content: space-around;
                align-items: center;
                position: fixed;
                bottom: 0;
                left: 0;
                width: 100%;
                background-color: #ffffff;
                box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
                padding: 10px 0;
                z-index: 1000; /* Ensure the bottom nav appears above other content */
            }
            .bottom-nav a {
                font-size: 18px;
                color: #000;
                text-align: center;
                flex-grow: 1;
                text-decoration: none;
            }
            .desktop-nav {
                display: none;
            }
            .mobile-nav {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 10px;
                background-color: #ffffff;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            }
            .nav-search {
                max-width: 60%;
            }
        }
        @media (min-width: 769px) {
            .bottom-nav {
                display: none;
            }
            .desktop-nav {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 10px;
                background-color: #ffffff;
            }
            .nav-search {
                max-width: 500px;
            }
            .mobile-nav {
                display: none;
            }
        }
        .profile-img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            object-fit: cover;
        }
        .desktop-nav, .mobile-nav {
            position: sticky;
            top: 0;
            z-index: 1000;
            background-color: #ffffff;
        }
        .scrollable-column {
            max-height: 60vh; /* Adjust height as needed */
            overflow-y: auto;
            overflow-x: hidden;
            padding: 10px; /* Add some padding for better spacing */
        }
        .price-details {
            position: sticky;
            top: 0;
            background-color: #ffffff; /* Ensure background color for sticky */
            padding: 15px;
            border-radius: 12px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        .pay-button {
            margin-bottom: 5%;
            font-size: 1rem; /* Larger font size */
            transition: background-color 0.3s; /* Smooth background color transition */
        }
        .pay-button:hover {
            background-color: #0056b3; /* Darker shade on hover */
        }
     /* Spinner Styles */
     .loader {
            width: 20px;
            aspect-ratio: 1;
            background: #25b09b;
            box-shadow: 0 0 60px 15px #25b09b;
            transform: translate(-80px);
            clip-path: inset(0);
            animation:
                l4-1 0.5s ease-in-out infinite alternate,
                l4-2 1s ease-in-out infinite;
        }
        @keyframes l4-1 {
            100% {transform: translateX(80px)}
        }
        @keyframes l4-2 {
            33% {clip-path: inset(0 0 0 -100px)}
            50% {clip-path: inset(0 0 0 0)}
            83% {clip-path: inset(0 -100px 0 0)}
        }
        #spinner {
            display: none; /* Initially hidden */
            justify-content: center;
            align-items: center;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgb(255, 255, 255); /* Semi-transparent background */
        }
        .delivery-message {
    opacity: 0;
    transform: translateY(20px); /* Move it slightly down */
    transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out; /* Smooth transition for both opacity and position */
    margin-bottom: 20px; /* Adjust the value as needed */
    visibility: hidden; /* Use visibility for better control */
}
.delivery-message.visible {
    opacity: 1;
    transform: translateY(0); /* Reset position */
    visibility: visible; /* Make it visible */
}
#totalDiscount {
    display: none; /* This hides the element */
}
.fade-in {
    opacity: 0;
    transition: opacity 0.2s ease-in;
}
.fade-in.show {
    opacity: 1;
}
.delivery-message {
    display: none; /* Initially hidden */
    opacity: 0;
    transition: opacity 0.10s ease-in;
}
.delivery-message.visible {
    opacity: 1; /* Fade in */
}
    </style>

</head>
<body>

    <nav class="navbar navbar-light bg-light d-lg-none sticky-top">
        <div class="container-fluid justify-content-between">
            <a class="navbar-brand" href="#">DelightX</a>
            <button class="btn btn-outline-secondary" type="button" aria-label="Search" data-bs-toggle="offcanvas" data-bs-target="#searchOffcanvas">
                <i class="fa-solid fa-magnifying-glass fa-fade"></i>
            </button>
        </div>
    </nav>
    
    <div class="offcanvas offcanvas-end offcanvas-full" tabindex="-1" id="searchOffcanvas" aria-labelledby="searchOffcanvasLabel">
        <div class="offcanvas-header">
            <h5 id="searchOffcanvasLabel">Search</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <input type="text" class="form-control" placeholder="Search for over 500 products" autofocus>
        </div>
    </div>
    
    <!-- Desktop Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light d-none d-lg-block sticky-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">DelightX</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="#">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">Profile</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="moreDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            More
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="moreDropdown">
                            <li><a class="dropdown-item" href="#">Settings</a></li>
                            <li><a class="dropdown-item" href="#">Help</a></li>
                        </ul>
                    </li>
                </ul>
                <form class="d-flex">
                    <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                    <button class="btn btn-outline-success me-2" type="submit">Search</button>
                    <button class="btn btn-outline-secondary" type="button" aria-label="Cart">
                        <i class="fa-solid fa-cart-shopping fa-bounce"></i>
                    </button>
                </form>
            </div>
        </div>
    </nav>
    
    <!-- Bottom Navigation for Mobile -->
    <nav class="navbar navbar-light bg-light fixed-bottom d-lg-none bottom-nav">
        <div class="container-fluid justify-content-around">
            <a class="nav-link text-center" href="DelightX-Home.html">
                <i class="fas fa-home fa-lg"></i>
                <div>Home</div>
            </a>
            <a class="nav-link text-center" href="#">
                <i class="fas fa-user fa-lg"></i>
                <div>Profile</div>
            </a>
            <a class="nav-link text-center" href="#">
                <i class="fas fa-ellipsis-h fa-lg"></i>
                <div>More</div>
            </a>
            <a class="nav-link text-center" href="DelightX-Cart.html">
                <i class="fas fa-shopping-cart fa-lg"></i>
                <div>Cart</div>
            </a>
        </div>
    </nav>
    
<div class="container mt-3">
    <h2 class="text-left mb-4 section-title">Shopping Cart</h2>
    <div class="row">
        <div class="col-lg-8 col-md-12 scrollable-column" id="cartItemsContainer">
            <div id="cartItems" class="row"></div>
            <img id="illustratorImage" src="src/undraw_empty_cart_co35.svg" alt="No items in cart" style="display: none; width: 100%; max-width: 400px; margin: auto;">
        </div>
        
        <div class="col-lg-4 col-md-12">
            <div class="price-details">
                <h5 class="text-center">
                    <i class="fa-solid fa-angle-up fa-bounce" id="scrollUpButton" style="cursor: pointer;"></i>
                </h5>                
                <h5 class="text-center">Price Details</h5>
                <div class="mb-3">
                    <strong>Total Amount:</strong> <span id="totalAmount" class="amount-value">0.00</span>
                </div>
                <div class="mb-3">
                    <strong>Delivery Charge:</strong> <span id="deliveryCharge">0.00</span>
                </div>
                <div class="mb-3">
                <span id="totalDiscount">0.00</span>
                </div>                
                <div class="mb-3">
                    <strong>You Save:</strong> <span id="totalSavings">0.00</span>
                </div>
                <div id="deliveryMessage" class="delivery-message mb-2" style="display: none;">
                    Your order will be delivered to your address by <span id="deliveryTime"></span>.
                </div>
                <div class="text-center mb-5">
                    <button id="payButton" class="btn btn-success btn-lg pay-button">Pay</button>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script type="module">
   import { initializeApp } from "https://www.gstatic.com/firebasejs/9.0.2/firebase-app.js";
import { getDatabase, ref, get, remove, set, update } from "https://www.gstatic.com/firebasejs/9.0.2/firebase-database.js";
import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.0.2/firebase-auth.js";
 const firebaseConfig = {
        apiKey: "AIzaSyC7IZ7BhQPOy7CfEQLuJTOxdrTybBZTFO8",
        authDomain: "delightx-in.firebaseapp.com",
        databaseURL: "https://delightx-in-default-rtdb.firebaseio.com",
        projectId: "delightx-in",
        storageBucket: "delightx-in.appspot.com",
        messagingSenderId: "554333595542",
        appId: "1:554333595542:web:d445cd0bea3f1483c21fb7"
    };
const app = initializeApp(firebaseConfig);
const database = getDatabase(app);
const auth = getAuth(app);

let currentUserUid = null; // Declare at the top level

onAuthStateChanged(auth, async (user) => {
    if (user) {
        currentUserUid = user.uid;
        console.log("User is logged in:", currentUserUid);
        await fetchCart(); // Fetch cart items after user logs in
    } else {
        console.log("User is not logged in. Redirecting to index.html.");
        window.location.href = "index.html"; 
    }
});

async function fetchCart() {
    if (!currentUserUid) {
        console.warn("User not logged in. Checking local storage for cart.");
        loadCartFromLocalStorage(); // Attempt to load cart from local storage
        return;
    }
    
    const cartRef = ref(database, `carts/${currentUserUid}`);
    const snapshot = await get(cartRef);
    if (snapshot.exists()) {
        const cart = snapshot.val();
        renderCart(cart); // Render the cart items
        storeCartInLocalStorage(cart); // Save cart to local storage
    } else {
        console.log("No cart data available in Firebase.");
        loadCartFromLocalStorage(); // Load from local storage if no data in Firebase
    }
}

// Function to load cart from local storage
function loadCartFromLocalStorage() {
    const cart = JSON.parse(localStorage.getItem(`cart_${currentUserUid}`));
    if (cart) {
        console.log("Loaded cart from local storage:", cart);
        renderCart(cart); // Render the cart from local storage
    } else {
        console.log("No cart found in local storage.");
        renderCart({}); // Render empty cart if no data found
    }
}

// Function to store cart in local storage
function storeCartInLocalStorage(cart) {
    localStorage.setItem(`cart_${currentUserUid}`, JSON.stringify(cart));
    console.log("Stored cart in local storage.");
}

function calculateFinalAmountWithDelivery(cart) {
    let total = 0;
    Object.values(cart).forEach(item => {
        total += parseFloat(item.finalPrice) * item.quantity;
    });

    // Delivery charge logic
    let deliveryCharge = 0;
    if (total < 500) {
        deliveryCharge = 49;
    } else if (total < 1000) {
        deliveryCharge = 39;
    } else if (total < 2000) {
        deliveryCharge = 29;
    }

    return total + deliveryCharge; // Add delivery charge
}
document.addEventListener("DOMContentLoaded", function () {
    const deliveryMessage = document.getElementById("deliveryMessage");
    const deliveryTime = document.getElementById("deliveryTime");
    function checkDeliveryTime() {
        const now = new Date();
        const hours = now.getHours();
        let delivery;
        if (hours >= 16) { // If time is 4 PM or later
            delivery = "tomorrow by 6 PM";
        } else {
            delivery = "today";
        }
        deliveryTime.textContent = delivery;
    }
    // Initial check for delivery time
    checkDeliveryTime();
    // Function to show the delivery message
function showDeliveryMessage() {
    setTimeout(() => {
        deliveryMessage.style.display = "block"; // Show message
        deliveryMessage.classList.add('visible'); // Add visible class for fade-in effect
    }, 2000); // Delay of 2 seconds
}
// Scroll effect
window.addEventListener('scroll', function () {
    const rect = deliveryMessage.getBoundingClientRect();
    const isVisible = rect.top <= window.innerHeight && rect.bottom >= 0;
    // Check if the delivery message is not yet displayed
    if (!isVisible && (rect.top <= window.innerHeight)) {
        showDeliveryMessage(); // Show message when user scrolls
    }
});
// Check if the delivery message is visible on page load
window.addEventListener('load', function () {
    const rect = deliveryMessage.getBoundingClientRect();
    // If it's already in the viewport
    if (rect.top <= window.innerHeight && rect.bottom >= 0) {
        showDeliveryMessage();
    }
});
});


document.getElementById('payButton').addEventListener('click', async () => {
    const uid = auth.currentUser.uid;
    const userRef = ref(database, `users/${uid}`);
    const userSnapshot = await get(userRef);
    // Check if user data exists
    if (!userSnapshot.exists()) {
        alert('Your profile is incomplete. Please update your address and mobile number.');
        window.location.href = 'profile.html'; 
        return;
    }
    const userData = userSnapshot.val();
    console.log('User    data:', userData); 
    // Check if user details are complete
    if (!userData.fullName || !userData.address || !userData.mobile) {
        alert('Please update your profile with your name, address, and mobile number.');
        window.location.href = 'profile.html'; 
        return;
    }
    const cartRef = ref(database, `carts/${uid}`);
    const snapshot = await get(cartRef);
    if (snapshot.exists()) {
        const cart = snapshot.val();
        // Check stock availability for each product in the cart
        const stockAvailability = await checkStockAvailability(cart);
        if (!stockAvailability) {
            alert(stockAvailability);
            return;
        }
        // Check if user selected quantity is greater than stock available
        const quantityCheck = await checkQuantity(cart);
        if (!quantityCheck) {
            alert('Sorry, the quantity you selected is greater than the stock available. Please try again later.');
            return;
        }
        // Calculate total amount including delivery charge
        const totalAmount = calculateFinalAmountWithDelivery(cart);
        // Prepare Razorpay payment options
        const options = {
            key: "rzp_test_XxEv4eXXqaPM4o", 
            amount: (totalAmount * 100).toFixed(0), 
            currency: "INR",
            name: "QuickBuy",
            description: "Your Order Description",
            handler: async function(response) {
                // Create order after successful payment
                await createOrder(cart);
                await removeAllCartItems();
                alert('Payment successful! Your cart has been cleared.');
            },
            prefill: {
                name: userData.fullName || "Customer Name",
                email: userData.email || "customer@example.com",
                contact: userData.mobile || "9999999999"
            },
            theme: {
                color: "#F37254"
            }
        };
        const razorpay = new Razorpay(options);
        razorpay.open();
    } else {
        alert('Your cart is empty.');
    }
});
async function removeAllCartItems() {
    const cartRef = ref(database, `carts/${currentUserUid}`);
    try {
        await remove(cartRef);
        console.log('All items removed from cart.');
        localStorage.removeItem(`cart_${currentUserUid}`);
        fetchCart();
    } catch (error) {
        console.error('Error removing cart items:', error);
    }
}
async function checkStockAvailability(cart) {
    for (const productId in cart) {
        const productRef = ref(database, `products/${productId}`);
        const snapshot = await get(productRef);
        if (snapshot.exists()) {
            const productData = snapshot.val();
            const currentStock = productData.stockAvailable;
            const quantityOrdered = cart[productId].quantity;
            if (currentStock < quantityOrdered) {
                return `Sorry, the product ${productId} is out of stock. Please try again later.`; 
            }
        } else {
            return `Sorry, the product ${productId} does not exist. Please try again later.`; 
        }
    }
    return true; 
}
async function checkQuantity(cart) {
    for (const productId in cart) {
        const productRef = ref(database, `products/${productId}`);
        const snapshot = await get(productRef);
        if (snapshot.exists()) {
            const productData = snapshot.val();
            const currentStock = productData.stockAvailable;
            const quantityOrdered = cart[productId].quantity;
            if (quantityOrdered > currentStock) {
                return false;
            }
        } else {
            return false;
        }
    }
    return true;
}

async function renderCart(cart) {
    const cartItemsContainer = document.getElementById('cartItems');
    const totalAmountElement = document.getElementById('totalAmount');
    const totalMRPElement = document.getElementById('totalMRP');
    const totalDiscountElement = document.getElementById('totalDiscount');
    const totalSavingsElement = document.getElementById('totalSavings');
    const deliveryChargeElement = document.getElementById('deliveryCharge');
    const illustratorImage = document.getElementById('illustratorImage');
    cartItemsContainer.innerHTML = '';
    // Check if the cart is empty
    if (!cart || Object.keys(cart).length === 0) {
        illustratorImage.style.display = 'block'; // Show the image
        totalAmountElement.innerHTML = '<span class="amount-value">₹0.00</span>';
        deliveryChargeElement.innerHTML = 'Free Delivery'; // Set delivery charge to "Free Delivery"
        return; // Exit the function if the cart is empty
    } else {
        illustratorImage.style.display = 'none'; // Hide the illustrator image if not empty
    }
    let totalAmount = 0;
    let totalMRP = 0;
    let totalDiscount = 0;
    Object.entries(cart).forEach(([key, item]) => {
        const col = document.createElement('div');
        col.className = 'col-12 mb-3 bg-light-gray';
        const row = document.createElement('div');
        row.className = 'row align-items-center';
        const imgCol = document.createElement('div');
        imgCol.className = 'col-3';
        const img = document.createElement('img');
        img.src = item.imageURL;
        img.className = 'card-img-top';
        imgCol.appendChild(img);
        row.appendChild(imgCol);
        const nameQtyCol = document.createElement('div');
        nameQtyCol.className = 'col-5';
        const title = document.createElement('h6');
        title.className = 'card-title mb-0';
        title.textContent = item.productName;
        nameQtyCol.appendChild(title);
        // Create quantity controls
        const qtyCol = document.createElement('div');
        qtyCol.className = 'qty-controls';
        const decrementBtn = document.createElement('button');
        decrementBtn.textContent = '-';
        decrementBtn.className = 'qty-btn';
        decrementBtn.addEventListener('click', () => {
            if (item.quantity > 1) {
                item.quantity--;
                updateQtyDisplay();
                updateCart(item, key); // Pass the current item and its key
            }
        });
        const qtyDisplay = document.createElement('span');
        qtyDisplay.className = 'qty-display';
        qtyDisplay.textContent = item.quantity;
        const incrementBtn = document.createElement('button');
        incrementBtn.textContent = '+';
        incrementBtn.className = 'qty-btn';
        incrementBtn.addEventListener('click', () => {
            if (item.quantity < Math.min(item.availableQuantity, 5)) {
                item.quantity++;
                updateQtyDisplay();
                updateCart(item, key); // Pass the current item and its key
            }
        });
        qtyCol.appendChild(decrementBtn);
        qtyCol.appendChild(qtyDisplay);
        qtyCol.appendChild(incrementBtn);
        qtyCol.appendChild(document.createTextNode(` ${item.availableQuantity} ${item.qtyUnit}`));
        nameQtyCol.appendChild(qtyCol);
        row.appendChild(nameQtyCol);
        const priceCol = document.createElement('div');
        priceCol.className = 'col-2';
        const finalPrice = document.createElement('p');
        finalPrice.className = 'price-text';
        finalPrice.innerHTML = `₹${(item.finalPrice * item.quantity).toFixed(2)}`;
        priceCol.appendChild(finalPrice);
        row.appendChild(priceCol);
        const deleteCol = document.createElement('div');
        deleteCol.className = 'col-2 text-center';
        const deleteBtn = document.createElement('span');
        deleteBtn.innerHTML = '<i class="fas fa-trash"></i>';
        deleteBtn.className = 'delete-btn';
        deleteBtn.addEventListener('click', () => {
            removeCartItem(key);
        });
        deleteCol.appendChild(deleteBtn);
        row.appendChild(deleteCol);
        col.appendChild(row);
        cartItemsContainer.appendChild(col);
        const itemQuantity = parseInt(item.quantity);
        const itemFinalPrice = parseFloat(item.finalPrice);
        const itemOriginalPrice = parseFloat(item.originalPrice);
        totalAmount += itemFinalPrice * itemQuantity;
        totalMRP += itemOriginalPrice * itemQuantity;
        totalDiscount += (itemOriginalPrice - itemFinalPrice) * itemQuantity;
        /// Check stock availability every second
        const productId = key;
        const productRef = ref(database, `products/${productId}`);
        const stockCheckInterval = setInterval(async () => {
            const snapshot = await get(productRef);
            if (snapshot.exists()) {
                const productData = snapshot.val();
                const currentStock = productData.stockAvailable;
                item.availableQuantity = currentStock; // Update item available quantity
                // Update visual elements based on available stock
                checkQuantityLimit();
                if (currentStock <= 0) {
                    // Update image to black and white if stock is 0
                    col.style.textDecoration = 'line-through';
                    img.style.filter = 'grayscale(100%)';
                    img.style.opacity = '0.5';
                    incrementBtn.disabled = true; // Disable increment if out of stock
                } else {
                    // Reset image if stock is available
                    img.style.filter = '';
                    img.style.opacity = '';
                }
                // Check quantity limit
                checkQuantityLimit();
            }
        }, 1000); // Check every second
        function updateQtyDisplay() {
            qtyDisplay.textContent = item.quantity;
            finalPrice.innerHTML = `₹${(item.finalPrice * item.quantity).toFixed(2)}`;
            if (item.quantity > item.availableQuantity) {
                col.style.textDecoration = 'line-through'; // Strike through if quantity exceeds stock
            } else {
                col.style.textDecoration = ''; // Remove strike through if quantity is valid
                img.style.filter = ''; // Reset image color
                img.style.opacity = '';
            }
        }
        function checkQuantityLimit() {
            if (item.quantity >= item.availableQuantity) {
                incrementBtn.disabled = true; // Disable increment button
                if (item.quantity > item.availableQuantity) {
                    col.style.textDecoration = 'line-through'; // Strike through if quantity exceeds stock
                }
            } else {
                incrementBtn.disabled = false; // Enable increment button
            }
        }
    });
    
    // Delivery charge logic
    let deliveryCharge = 0;
    if (totalAmount < 500) {
        deliveryCharge = 49;
    } else if (totalAmount < 1000) {
        deliveryCharge = 39;
    } else if (totalAmount < 2000) {
        deliveryCharge = 29;
    }

    // Update total amounts in the UI
    totalAmountElement.innerHTML = `<span class="amount-value"><span class="strike-through">₹${calculateTotalAmount(cart).toFixed(2)}</span> ₹${(totalAmount + deliveryCharge).toFixed(2)}</span>`;
    totalSavingsElement.innerHTML = `₹${totalDiscount.toFixed(2)}`;
    deliveryChargeElement.innerHTML = `₹${deliveryCharge}`; // Show the calculated delivery charge

    // CSS for the animation and button styling
    const style = document.createElement('style');
    style.innerHTML = `
        .strike-through {
            animation: strikeThrough 1s forwards;
        }
        @keyframes strikeThrough {
            from {
                opacity: 1;
            }
            to {
                opacity: 0.5;
                text-decoration: line-through;
            }
        }
        .qty-btn {
            margin: 0 5px;
            padding: 2px 5px; /* Reduced padding for smaller size */
            cursor: pointer;
            font-size: 16px; /* Adjust font size */
            border: 1px solid #ccc; /* Add border for better visibility */
            border-radius: 4px; /* Rounded corners */
            background-color: #f0f0f0; /* Background color */
            transition: background-color 0.2s; /* Smooth transition */
        }
        .qty-btn:hover {
            background-color: #e0e0e0; /* Change color on hover */
        }
        .qty-btn:disabled {
            background-color: #ddd; /* Disabled button color */
            cursor: not-allowed; /* Change cursor style */
        }
    `;
    document.head.appendChild(style);
    function updateCart(item, key) {
        // Update Firebase with the current cart item
        const cartRef = ref(database, `carts/${currentUserUid}/${key}`);
        const updatedItem = { quantity: item.quantity }; // Create an object with only the updated quantity
        // Use update to only modify the quantity field
        update(cartRef, updatedItem)
            .then(() => {
                console.log('Quantity updated successfully');
            })
            .catch((error) => {
                console.error('Error updating quantity:', error);
            });
        // Recalculate totals
        totalAmount = 0;
        totalMRP = 0;
        totalDiscount = 0;
        Object.values(cart).forEach(cartItem => {
            const itemQuantity = parseInt(cartItem.quantity);
            const itemFinalPrice = parseFloat(cartItem.finalPrice);
            const itemOriginalPrice = parseFloat(cartItem.originalPrice);
            totalAmount += itemFinalPrice * itemQuantity;
            totalMRP += itemOriginalPrice * itemQuantity;
            totalDiscount += (itemOriginalPrice - itemFinalPrice) * itemQuantity;
        });
        // Update total amounts in the UI
        totalAmountElement.innerHTML = `<span class="amount-value"><span class="strike-through">₹${calculateTotalAmount(cart).toFixed(2)}</span> ₹${totalAmount.toFixed(2)}</span>`;
        totalSavingsElement.innerHTML = `₹${totalDiscount.toFixed(2)}`;
    }
}


async function removeCartItem(productId) {
    const cartRef = ref(database, `carts/${currentUserUid}`); // Use currentUserUid instead of currentUserId
    try {
        const snapshot = await get(cartRef);
        if (snapshot.exists()) {
            const cart = snapshot.val();
            delete cart[productId];
            await set(cartRef, cart);
            console.log('Item removed:', productId);
            storeCartInLocalStorage(cart);
            fetchCart();
        }
    } catch (error) {
        console.error('Error deleting item:', error);
    }
}


function getStoredLocation() {
    const storedData = localStorage.getItem("userLocation");
    if (storedData) {
        const locationData = JSON.parse(storedData);
        const currentTime = Date.now();

        if (currentTime - locationData.timestamp < 3600000) {
            return {
                latitude: locationData.latitude,
                longitude: locationData.longitude,
            };
        } else {
            localStorage.removeItem("userLocation");
        }
    }
    return null;
}

async function createOrder(cart) {
    const uid = auth.currentUser.uid;
    
    // Fetch user data to get the email and other details
    const userSnapshot = await get(ref(database, `users/${uid}`));
    const userData = userSnapshot.val();
    const userEmail = userData.email; 
    const userfullname = userData.fullName; 
    const userMobilenumber = userData.mobile;
    const userAddress = userData.address;  

    // Fetch user's location using the getStoredLocation function
    const userLocation = getStoredLocation();
    const userLat = userLocation ? userLocation.latitude : null;
    const userLng = userLocation ? userLocation.longitude : null;

    const orderId = `order_${uid}_${Date.now()}_${Math.floor(Math.random() * 10000)}`; 
    const orderData = {
        userName: userfullname,
        usermobilenumber: userMobilenumber,
        useraddress: userAddress,
        orderId: orderId,
        userId: uid,
        userEmail: userEmail, 
        items: cart,
        totalAmount: calculateTotalAmount(cart),
        orderDate: new Date().toISOString(),
        isNew: true, // Set isNew property to true
        latitude: userLat, // Store user's latitude
        longitude: userLng  // Store user's longitude
    };
    
    const ordersRef = ref(database, `orders/${uid}/${orderId}`);
    await set(ordersRef, orderData);
    console.log('Order created:', orderData);
    
    // Update stock availability for each product in the cart
    await updateStockAvailability(cart);
}

async function updateUserLocation(uid, latitude, longitude) {
    const userRef = ref(database, `users/${uid}`);
    await update(userRef, {
        location: {
            latitude: latitude,
            longitude: longitude
        }
    });
}

async function updateStockAvailability(cart) {
    for (const productId in cart) {
        const productRef = ref(database, `products/${productId}`);
        const snapshot = await get(productRef);
        if (snapshot.exists()) {
            const productData = snapshot.val();
            const currentStock = productData.stockAvailable;
            const quantityOrdered = cart[productId].quantity;
            if (currentStock >= quantityOrdered) {
                const newStock = currentStock - quantityOrdered;
                await update(productRef, { stockAvailable: newStock });
                console.log(`Updated stock for product ${productId}: ${newStock}`);
            } else {
                console.error(`Insufficient stock for product ${productId}`);
            }
        } else {
            console.error(`Product ${productId} not found`);
        }
    }
}
function calculateTotalAmount(cart) {
    let total = 0;
    Object.values(cart).forEach(item => {
        total += item.originalPrice * item.quantity;
    });
    return total;
}
// Hide the total discount element
document.getElementById('totalDiscount').style.display = 'none';
// You can still calculate and use totalDiscount in your logic
function calculateTotalDiscount(cart) {
    let totalDiscount = 0;
    Object.values(cart).forEach(item => {
        totalDiscount += item.discount * item.quantity; // Assuming `item.discount` is the discount per item
    });
    return totalDiscount;
}
document.getElementById('scrollUpButton').addEventListener('click', function() {
    // Scroll up by 100 pixels (adjust the value as needed)
    window.scrollBy({
        top: 1000, // Scroll up
        behavior: 'smooth' // Smooth scrolling
    });
});
</script>
</body>
</html>



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DelightX</title>
    <link rel="stylesheet" href="css/style.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat+Alternates:wght@100;400;700&display=swap" rel="stylesheet">
    <style>
       
       body {
        background-color: #ffffff;
        font-family:  "Montserrat", sans-serif;
    }
    .navbar-brand {
font-family: "Righteous", sans-serif !important;
}
    button.qty-btn {
    width: 30px; /* Fixed width for buttons */
    margin: 5px; /* No margin between buttons */
    background-color: green; /* Green background for buttons */
    color: white; /* White text for buttons */
    border: none; /* Remove default border */
    border-radius: 4px; /* Optional: rounded corners */
    transition: background-color 0.2s; /* Smooth transition */
}
button.qty-btn:hover {
    background-color: darkgreen; /* Darker green on hover */
}
button.qty-btn:active {
    background-color: darkgreen; /* Keep darker green on click */
}
button.qty-btn:disabled {
    background-color: #4a4848; /* Disabled button color */
    cursor: not-allowed; /* Change cursor style */
}
        .card {
            border: none;
            border-radius: 12px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        .card-img-top {
            border-radius: 12px;
            object-fit: contain;
            height: 80px;
        }
        .total-price {
            font-size: 1rem;
            font-weight: bold;
            color: #007bff;
        }
        .delete-btn {
            cursor: pointer;
            color: red;
            font-size: 0.9rem;
        }
        .price-text {
            font-size: 0.9rem;
        }
        .bg-light-gray {
            background-color: #ffffff;
        }
        .section-title {
            font-weight: 600;
            color: #343a40;
        }
        .price-details {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            padding: 15px;
        }
        .discount-price, .total-amount {
            color: green;
            font-weight: bold;
        }
        .amount-value {
            color: rgb(0, 0, 0);
            font-weight: 600;
        }
        @media (max-width: 576px) {
            h2 {
                font-size: 1.5rem;
                text-align: center; /* Center title on mobile */
            }
            .total-price {
                font-size: 1rem;
            }
            .delete-btn {
                font-size: 1rem;
            }
            .card-img-top {
                height: 60px;
            }
            .price-details {
                padding: 10px; /* Adjust padding for mobile */
            }
            .scrollable-column {
                padding: 5px; /* Less padding for mobile */
            }
            .bottom-nav a {
                font-size: 14px; /* Smaller font size for mobile */
            }
        }
        @media (max-width: 768px) {
            .bottom-nav {
                display: flex;
                justify-content: space-around;
                align-items: center;
                position: fixed;
                bottom: 0;
                left: 0;
                width: 100%;
                background-color: #ffffff;
                box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
                padding: 10px 0;
                z-index: 1000; /* Ensure the bottom nav appears above other content */
            }
            .bottom-nav a {
                font-size: 18px;
                color: #000;
                text-align: center;
                flex-grow: 1;
                text-decoration: none;
            }
            .desktop-nav {
                display: none;
            }
            .mobile-nav {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 10px;
                background-color: #ffffff;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            }
            .nav-search {
                max-width: 60%;
            }
        }
        @media (min-width: 769px) {
            .bottom-nav {
                display: none;
            }
            .desktop-nav {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 10px;
                background-color: #ffffff;
            }
            .nav-search {
                max-width: 500px;
            }
            .mobile-nav {
                display: none;
            }
        }
        .profile-img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            object-fit: cover;
        }
        .desktop-nav, .mobile-nav {
            position: sticky;
            top: 0;
            z-index: 1000;
            background-color: #ffffff;
        }
        .scrollable-column {
            max-height: 60vh; /* Adjust height as needed */
            overflow-y: auto;
            overflow-x: hidden;
            padding: 10px; /* Add some padding for better spacing */
        }
        .price-details {
            position: sticky;
            top: 0;
            background-color: #ffffff; /* Ensure background color for sticky */
            padding: 15px;
            border-radius: 12px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        .pay-button {
            margin-bottom: 5%;
            font-size: 1rem; /* Larger font size */
            transition: background-color 0.3s; /* Smooth background color transition */
        }
        .pay-button:hover {
            background-color: #0056b3; /* Darker shade on hover */
        }
     /* Spinner Styles */
     .loader {
            width: 20px;
            aspect-ratio: 1;
            background: #25b09b;
            box-shadow: 0 0 60px 15px #25b09b;
            transform: translate(-80px);
            clip-path: inset(0);
            animation:
                l4-1 0.5s ease-in-out infinite alternate,
                l4-2 1s ease-in-out infinite;
        }
        @keyframes l4-1 {
            100% {transform: translateX(80px)}
        }
        @keyframes l4-2 {
            33% {clip-path: inset(0 0 0 -100px)}
            50% {clip-path: inset(0 0 0 0)}
            83% {clip-path: inset(0 -100px 0 0)}
        }
        #spinner {
            display: none; /* Initially hidden */
            justify-content: center;
            align-items: center;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgb(255, 255, 255); /* Semi-transparent background */
        }
        .delivery-message {
    opacity: 0;
    transform: translateY(20px); /* Move it slightly down */
    transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out; /* Smooth transition for both opacity and position */
    margin-bottom: 20px; /* Adjust the value as needed */
    visibility: hidden; /* Use visibility for better control */
}
.delivery-message.visible {
    opacity: 1;
    transform: translateY(0); /* Reset position */
    visibility: visible; /* Make it visible */
}
#totalDiscount {
    display: none; /* This hides the element */
}
.fade-in {
    opacity: 0;
    transition: opacity 0.2s ease-in;
}
.fade-in.show {
    opacity: 1;
}
.delivery-message {
    display: none; /* Initially hidden */
    opacity: 0;
    transition: opacity 0.10s ease-in;
}
.delivery-message.visible {
    opacity: 1; /* Fade in */
}
    </style>

</head>
<body>

    <nav class="navbar navbar-light bg-light d-lg-none sticky-top">
        <div class="container-fluid justify-content-between">
            <a class="navbar-brand" href="#">DelightX</a>
            <button class="btn btn-outline-secondary" type="button" aria-label="Search" data-bs-toggle="offcanvas" data-bs-target="#searchOffcanvas">
                <i class="fa-solid fa-magnifying-glass fa-fade"></i>
            </button>
        </div>
    </nav>
    
    <div class="offcanvas offcanvas-end offcanvas-full" tabindex="-1" id="searchOffcanvas" aria-labelledby="searchOffcanvasLabel">
        <div class="offcanvas-header">
            <h5 id="searchOffcanvasLabel">Search</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <input type="text" class="form-control" placeholder="Search for over 500 products" autofocus>
        </div>
    </div>
    
    <!-- Desktop Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light d-none d-lg-block sticky-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">DelightX</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="#">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">Profile</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="moreDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            More
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="moreDropdown">
                            <li><a class="dropdown-item" href="#">Settings</a></li>
                            <li><a class="dropdown-item" href="#">Help</a></li>
                        </ul>
                    </li>
                </ul>
                <form class="d-flex">
                    <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                    <button class="btn btn-outline-success me-2" type="submit">Search</button>
                    <button class="btn btn-outline-secondary" type="button" aria-label="Cart">
                        <i class="fa-solid fa-cart-shopping fa-bounce"></i>
                    </button>
                </form>
            </div>
        </div>
    </nav>
    
    <!-- Bottom Navigation for Mobile -->
    <nav class="navbar navbar-light bg-light fixed-bottom d-lg-none bottom-nav">
        <div class="container-fluid justify-content-around">
            <a class="nav-link text-center" href="DelightX-Home.html">
                <i class="fas fa-home fa-lg"></i>
                <div>Home</div>
            </a>
            <a class="nav-link text-center" href="#">
                <i class="fas fa-user fa-lg"></i>
                <div>Profile</div>
            </a>
            <a class="nav-link text-center" href="#">
                <i class="fas fa-ellipsis-h fa-lg"></i>
                <div>More</div>
            </a>
            <a class="nav-link text-center" href="DelightX-Cart.html">
                <i class="fas fa-shopping-cart fa-lg"></i>
                <div>Cart</div>
            </a>
        </div>
    </nav>
    
<div class="container mt-3">
    <h2 class="text-left mb-4 section-title">Shopping Cart</h2>
    <div class="row">
        <div class="col-lg-8 col-md-12 scrollable-column" id="cartItemsContainer">
            <div id="cartItems" class="row"></div>
            <img id="illustratorImage" src="src/undraw_empty_cart_co35.svg" alt="No items in cart" style="display: none; width: 100%; max-width: 400px; margin: auto;">
        </div>
        
        <div class="col-lg-4 col-md-12">
            <div class="price-details">
                <h5 class="text-center">
                    <i class="fa-solid fa-angle-up fa-bounce" id="scrollUpButton" style="cursor: pointer;"></i>
                </h5>                
                <h5 class="text-center">Price Details</h5>
                <div class="mb-3">
                    <strong>Total Amount:</strong> <span id="totalAmount" class="amount-value">0.00</span>
                </div>
                <div class="mb-3">
                    <strong>Delivery Charge:</strong> <span id="deliveryCharge">0.00</span>
                </div>
                <div class="mb-3">
                <span id="totalDiscount">0.00</span>
                </div>                
                <div class="mb-3">
                    <strong>You Save:</strong> <span id="totalSavings">0.00</span>
                </div>
                <div id="deliveryMessage" class="delivery-message mb-2" style="display: none;">
                    Your order will be delivered to your address by <span id="deliveryTime"></span>.
                </div>
                <div class="text-center mb-5">
                    <button id="payButton" class="btn btn-success btn-lg pay-button">Pay</button>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script type="module">
   import { initializeApp } from "https://www.gstatic.com/firebasejs/9.0.2/firebase-app.js";
import { getDatabase, ref, get, remove, set, update } from "https://www.gstatic.com/firebasejs/9.0.2/firebase-database.js";
import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.0.2/firebase-auth.js";
 const firebaseConfig = {
        apiKey: "AIzaSyC7IZ7BhQPOy7CfEQLuJTOxdrTybBZTFO8",
        authDomain: "delightx-in.firebaseapp.com",
        databaseURL: "https://delightx-in-default-rtdb.firebaseio.com",
        projectId: "delightx-in",
        storageBucket: "delightx-in.appspot.com",
        messagingSenderId: "554333595542",
        appId: "1:554333595542:web:d445cd0bea3f1483c21fb7"
    };
const app = initializeApp(firebaseConfig);
const database = getDatabase(app);
const auth = getAuth(app);

let currentUserUid = null; // Declare at the top level

onAuthStateChanged(auth, async (user) => {
    if (user) {
        currentUserUid = user.uid;
        console.log("User is logged in:", currentUserUid);
        await fetchCart(); // Fetch cart items after user logs in
    } else {
        console.log("User is not logged in. Redirecting to index.html.");
        window.location.href = "index.html"; 
    }
});
async function fetchCart() {
    if (!currentUserUid) {
        console.warn("User not logged in. Checking local storage for cart.");
        loadCartFromLocalStorage(); // Attempt to load cart from local storage
        return;
    }

    const cartRef = ref(database, `carts/${currentUserUid}`);
    const snapshot = await get(cartRef);
    if (snapshot.exists()) {
        const cart = snapshot.val();
        renderCart(cart); // Render the cart items
        storeCartInLocalStorage(cart); // Save cart to local storage
    } else {
        console.log("No cart data available in Firebase.");
        loadCartFromLocalStorage(); // Load from local storage if no data in Firebase
    }
}

// Function to load cart from local storage
function loadCartFromLocalStorage() {
    const cart = JSON.parse(localStorage.getItem(`cart_${currentUserUid}`));
    if (cart) {
        console.log("Loaded cart from local storage:", cart);
        renderCart(cart); // Render the cart from local storage
    } else {
        console.log("No cart found in local storage.");
        renderCart({}); // Render empty cart if no data found
    }
}

// Function to store cart in local storage
function storeCartInLocalStorage(cart) {
    localStorage.setItem(`cart_${currentUserUid}`, JSON.stringify(cart));
    console.log("Stored cart in local storage.");
}

function calculateFinalAmountWithDelivery(cart) {
    let total = 0;
    Object.values(cart).forEach(item => {
        total += parseFloat(item.finalPrice) * item.quantity;
    });

    // Delivery charge logic
    let deliveryCharge = 0;
    if (total < 500) {
        deliveryCharge = 49;
    } else if (total < 1000) {
        deliveryCharge = 39;
    } else if (total < 2000) {
        deliveryCharge = 29;
    }

    return total + deliveryCharge; // Add delivery charge
}


document.addEventListener("DOMContentLoaded", function () {
    const deliveryMessage = document.getElementById("deliveryMessage");
    const deliveryTime = document.getElementById("deliveryTime");
    function checkDeliveryTime() {
        const now = new Date();
        const hours = now.getHours();
        let delivery;
        if (hours >= 16) { // If time is 4 PM or later
            delivery = "tomorrow by 6 PM";
        } else {
            delivery = "today";
        }
        deliveryTime.textContent = delivery;
    }
    // Initial check for delivery time
    checkDeliveryTime();
    // Function to show the delivery message
function showDeliveryMessage() {
    setTimeout(() => {
        deliveryMessage.style.display = "block"; // Show message
        deliveryMessage.classList.add('visible'); // Add visible class for fade-in effect
    }, 2000); // Delay of 2 seconds
}
// Scroll effect
window.addEventListener('scroll', function () {
    const rect = deliveryMessage.getBoundingClientRect();
    const isVisible = rect.top <= window.innerHeight && rect.bottom >= 0;
    // Check if the delivery message is not yet displayed
    if (!isVisible && (rect.top <= window.innerHeight)) {
        showDeliveryMessage(); // Show message when user scrolls
    }
});
// Check if the delivery message is visible on page load
window.addEventListener('load', function () {
    const rect = deliveryMessage.getBoundingClientRect();
    // If it's already in the viewport
    if (rect.top <= window.innerHeight && rect.bottom >= 0) {
        showDeliveryMessage();
    }
});
});


document.getElementById('payButton').addEventListener('click', async () => {
    const uid = auth.currentUser.uid;
    const userRef = ref(database, `users/${uid}`);
    const userSnapshot = await get(userRef);
    // Check if user data exists
    if (!userSnapshot.exists()) {
        alert('Your profile is incomplete. Please update your address and mobile number.');
        window.location.href = 'profile.html'; 
        return;
    }
    const userData = userSnapshot.val();
    console.log('User    data:', userData); 
    // Check if user details are complete
    if (!userData.fullName || !userData.address || !userData.mobile) {
        alert('Please update your profile with your name, address, and mobile number.');
        window.location.href = 'profile.html'; 
        return;
    }
    const cartRef = ref(database, `carts/${uid}`);
    const snapshot = await get(cartRef);
    if (snapshot.exists()) {
        const cart = snapshot.val();
        // Check stock availability for each product in the cart
        const stockAvailability = await checkStockAvailability(cart);
        if (!stockAvailability) {
            alert(stockAvailability);
            return;
        }
        // Check if user selected quantity is greater than stock available
        const quantityCheck = await checkQuantity(cart);
        if (!quantityCheck) {
            alert('Sorry, the quantity you selected is greater than the stock available. Please try again later.');
            return;
        }
        // Calculate total amount including delivery charge
        const totalAmount = calculateFinalAmountWithDelivery(cart);
        // Prepare Razorpay payment options
        const options = {
            key: "rzp_test_XxEv4eXXqaPM4o", 
            amount: (totalAmount * 100).toFixed(0), 
            currency: "INR",
            name: "QuickBuy",
            description: "Your Order Description",
            handler: async function(response) {
                // Create order after successful payment
                await createOrder(cart);
                await removeAllCartItems();
                alert('Payment successful! Your cart has been cleared.');
            },
            prefill: {
                name: userData.fullName || "Customer Name",
                email: userData.email || "customer@example.com",
                contact: userData.mobile || "9999999999"
            },
            theme: {
                color: "#F37254"
            }
        };
        const razorpay = new Razorpay(options);
        razorpay.open();
    } else {
        alert('Your cart is empty.');
    }
});
async function removeAllCartItems() {
    const cartRef = ref(database, `carts/${currentUserUid}`);
    try {
        await remove(cartRef);
        console.log('All items removed from cart.');
        localStorage.removeItem(`cart_${currentUserUid}`);
        fetchCart();
    } catch (error) {
        console.error('Error removing cart items:', error);
    }
}
async function checkStockAvailability(cart) {
    for (const productId in cart) {
        const productRef = ref(database, `products/${productId}`);
        const snapshot = await get(productRef);
        if (snapshot.exists()) {
            const productData = snapshot.val();
            const currentStock = productData.stockAvailable;
            const quantityOrdered = cart[productId].quantity;
            if (currentStock < quantityOrdered) {
                return `Sorry, the product ${productId} is out of stock. Please try again later.`; 
            }
        } else {
            return `Sorry, the product ${productId} does not exist. Please try again later.`; 
        }
    }
    return true; 
}
async function checkQuantity(cart) {
    for (const productId in cart) {
        const productRef = ref(database, `products/${productId}`);
        const snapshot = await get(productRef);
        if (snapshot.exists()) {
            const productData = snapshot.val();
            const currentStock = productData.stockAvailable;
            const quantityOrdered = cart[productId].quantity;
            if (quantityOrdered > currentStock) {
                return false;
            }
        } else {
            return false;
        }
    }
    return true;
}
async function renderCart(cart) {
    const cartItemsContainer = document.getElementById('cartItems');
    const totalAmountElement = document.getElementById('totalAmount');
    const totalMRPElement = document.getElementById('totalMRP');
    const totalDiscountElement = document.getElementById('totalDiscount');
    const totalSavingsElement = document.getElementById('totalSavings');
    const deliveryChargeElement = document.getElementById('deliveryCharge');
    const illustratorImage = document.getElementById('illustratorImage');
    cartItemsContainer.innerHTML = '';
    
    // Check if the cart is empty
    if (!cart || Object.keys(cart).length === 0) {
        illustratorImage.style.display = 'block'; // Show the image
        totalAmountElement.innerHTML = '<span class="amount-value">₹0.00</span>';
        deliveryChargeElement.innerHTML = 'Free Delivery'; // Set delivery charge to "Free Delivery"
        return; // Exit the function if the cart is empty
    } else {
        illustratorImage.style.display = 'none'; // Hide the illustrator image if not empty
    }

    let totalAmount = 0;
    let totalMRP = 0;
    let totalDiscount = 0;
    
    Object.entries(cart).forEach(([key, item]) => {
        const col = document.createElement('div');
        col.className = 'col-12 mb-3 bg-light-gray';
        const row = document.createElement('div');
        row.className = 'row align-items-center';
        const imgCol = document.createElement('div');
        imgCol.className = 'col-3';
        const img = document.createElement('img');
        img.src = item.imageURL;
        img.className = 'card-img-top';
        imgCol.appendChild(img);
        row.appendChild(imgCol);
        const nameQtyCol = document.createElement('div');
        nameQtyCol.className = 'col-5';
        const title = document.createElement('h6');
        title.className = 'card-title mb-0';
        title.textContent = item.productName;
        nameQtyCol.appendChild(title);

        // Create quantity controls
        const qtyCol = document.createElement('div');
        qtyCol.className = 'qty-controls';
        const decrementBtn = document.createElement('button');
        decrementBtn.textContent = '-';
        decrementBtn.className = 'qty-btn';
        decrementBtn.addEventListener('click', () => {
            if (item.quantity > 1) {
                item.quantity--;
                updateQtyDisplay();
                updateCart(item, key); // Pass the current item and its key
            }
        });
        const qtyDisplay = document.createElement('span');
        qtyDisplay.className = 'qty-display';
        qtyDisplay.textContent = item.quantity;
        const incrementBtn = document.createElement('button');
        incrementBtn.textContent = '+';
        incrementBtn.className = 'qty-btn';
        incrementBtn.addEventListener('click', () => {
            if (item.quantity < Math.min(item.availableQuantity, 5)) {
                item.quantity++;
                updateQtyDisplay();
                updateCart(item, key); // Pass the current item and its key
            }
        });
        qtyCol.appendChild(decrementBtn);
        qtyCol.appendChild(qtyDisplay);
        qtyCol.appendChild(incrementBtn);
        qtyCol.appendChild(document.createTextNode(` ${item.availableQuantity} ${item.qtyUnit}`));
        nameQtyCol.appendChild(qtyCol);
        row.appendChild(nameQtyCol);
        const priceCol = document.createElement('div');
        priceCol.className = 'col-2';
        const finalPrice = document.createElement('p');
        finalPrice.className = 'price-text';
        finalPrice.innerHTML = `₹${(item.finalPrice * item.quantity).toFixed(2)}`;
        priceCol.appendChild(finalPrice);
        row.appendChild(priceCol);
        const deleteCol = document.createElement('div');
        deleteCol.className = 'col-2 text-center';
        const deleteBtn = document.createElement('span');
        deleteBtn.innerHTML = '<i class="fas fa-trash"></i>';
        deleteBtn.className = 'delete-btn';
        deleteBtn.addEventListener('click', () => {
            removeCartItem(key);
        });
        deleteCol.appendChild(deleteBtn);
        row.appendChild(deleteCol);
        col.appendChild(row);
        cartItemsContainer.appendChild(col);
        const itemQuantity = parseInt(item.quantity);
        const itemFinalPrice = parseFloat(item.finalPrice);
        const itemOriginalPrice = parseFloat(item.originalPrice);
        totalAmount += itemFinalPrice * itemQuantity;
        totalMRP += itemOriginalPrice * itemQuantity;
        totalDiscount += (itemOriginalPrice - itemFinalPrice) * itemQuantity;

        /// Check stock availability every second
        const productId = key;
        const productRef = ref(database, `products/${productId}`);
        const stockCheckInterval = setInterval(async () => {
            const snapshot = await get(productRef);
            if (snapshot.exists()) {
                const productData = snapshot.val();
                const currentStock = productData.stockAvailable;
                item.availableQuantity = currentStock; // Update item available quantity
                // Update visual elements based on available stock
                checkQuantityLimit();
                if (currentStock <= 0) {
                    // Update image to black and white if stock is 0
                    col.style.textDecoration = 'line-through';
                    img.style.filter = 'grayscale(100%)';
                    img.style.opacity = '0.5';
                    incrementBtn.disabled = true; // Disable increment if out of stock
                } else {
                    // Reset image if stock is available
                    img.style.filter = '';
                    img.style.opacity = '';
                }
                // Check quantity limit
                checkQuantityLimit();
            }
        }, 1000); // Check every second
        
        function updateQtyDisplay() {
            qtyDisplay.textContent = item.quantity;
            finalPrice.innerHTML = `₹${(item.finalPrice * item.quantity).toFixed(2)}`;
            if (item.quantity > item.availableQuantity) {
                col.style.textDecoration = 'line-through'; // Strike through if quantity exceeds stock
            } else {
                col.style.textDecoration = ''; // Remove strike through if quantity is valid
                img.style.filter = ''; // Reset image color
                img.style.opacity = '';
            }
            // Recalculate totals and update delivery charge
            recalculateTotals();
        }

        function checkQuantityLimit() {
            if (item.quantity >= item.availableQuantity) {
                incrementBtn.disabled = true; // Disable increment button
                if (item.quantity > item.availableQuantity) {
                    col.style.textDecoration = 'line-through'; // Strike through if quantity exceeds stock
                }
            } else {
                incrementBtn.disabled = false; // Enable increment button
            }
        }
    });
    
    // Initial delivery charge logic
    recalculateTotals();
    
    // New function to recalculate totals and update the UI
function recalculateTotals() {
    let totalAmount = 0;
    let totalDiscount = 0; // Added to calculate total discount
    
    Object.values(cart).forEach(item => {
        totalAmount += parseFloat(item.finalPrice) * item.quantity;
        const itemOriginalPrice = parseFloat(item.originalPrice);
        totalDiscount += (itemOriginalPrice - item.finalPrice) * item.quantity; // Calculate discount
    });

    // Delivery charge logic
    let deliveryCharge = 0;
    if (totalAmount < 500) {
        deliveryCharge = 49;
    } else if (totalAmount < 1000) {
        deliveryCharge = 39;
    } else if (totalAmount < 2000) {
        deliveryCharge = 29;
    }

    // Update total amounts in the UI
    totalAmountElement.innerHTML = `<span class="amount-value"><span class="strike-through">₹${calculateTotalAmount(cart).toFixed(2)}</span> ₹${(totalAmount + deliveryCharge).toFixed(2)}</span>`;
    totalSavingsElement.innerHTML = `₹${totalDiscount.toFixed(2)}`;
    deliveryChargeElement.innerHTML = `₹${deliveryCharge}`; // Show the calculated delivery charge
}

// Update cart logic
function updateCart(item, key) {
    // Update Firebase with the current cart item
    const cartRef = ref(database, `carts/${currentUserUid}/${key}`);
    const updatedItem = { quantity: item.quantity }; // Create an object with only the updated quantity
    // Use update to only modify the quantity field
    update(cartRef, updatedItem)
        .then(() => {
            console.log('Quantity updated successfully');
        })
        .catch((error) => {
            console.error('Error updating quantity:', error);
        });
}

// CSS for the animation and button styling
const style = document.createElement('style');
style.innerHTML = `
    .strike-through {
        animation: strikeThrough 1s forwards;
    }
    @keyframes strikeThrough {
        from {
            opacity: 1;
        }
        to {
            opacity: 0.5;
            text-decoration: line-through;
        }
    }
    .qty-btn {
        margin: 0 5px;
        padding: 2px 5px; /* Reduced padding for smaller size */
        cursor: pointer;
        font-size: 16px; /* Adjust font size */
        border: 1px solid #ccc; /* Add border for better visibility */
        border-radius: 4px; /* Rounded corners */
        background-color: #f0f0f0; /* Background color */
        transition: background-color 0.2s; /* Smooth transition */
    }
    .qty-btn:hover {
        background-color: #e0e0e0; /* Change color on hover */
    }
    .qty-btn:disabled {
        background-color: #ddd; /* Disabled button color */
        cursor: not-allowed; /* Change cursor style */
    }
`;
document.head.appendChild(style);
}


async function removeCartItem(productId) {
    const cartRef = ref(database, `carts/${currentUserUid}`); // Use currentUserUid instead of currentUserId
    try {
        const snapshot = await get(cartRef);
        if (snapshot.exists()) {
            const cart = snapshot.val();
            delete cart[productId];
            await set(cartRef, cart);
            console.log('Item removed:', productId);
            storeCartInLocalStorage(cart);
            fetchCart();
        }
    } catch (error) {
        console.error('Error deleting item:', error);
    }
}


function getStoredLocation() {
    const storedData = localStorage.getItem("userLocation");
    if (storedData) {
        const locationData = JSON.parse(storedData);
        const currentTime = Date.now();

        if (currentTime - locationData.timestamp < 3600000) {
            return {
                latitude: locationData.latitude,
                longitude: locationData.longitude,
            };
        } else {
            localStorage.removeItem("userLocation");
        }
    }
    return null;
}

async function createOrder(cart) {
    const uid = auth.currentUser.uid;
    
    // Fetch user data to get the email and other details
    const userSnapshot = await get(ref(database, `users/${uid}`));
    const userData = userSnapshot.val();
    const userEmail = userData.email; 
    const userfullname = userData.fullName; 
    const userMobilenumber = userData.mobile;
    const userAddress = userData.address;  

    // Fetch user's location using the getStoredLocation function
    const userLocation = getStoredLocation();
    const userLat = userLocation ? userLocation.latitude : null;
    const userLng = userLocation ? userLocation.longitude : null;

    const orderId = `order_${uid}_${Date.now()}_${Math.floor(Math.random() * 10000)}`; 
    const orderData = {
        userName: userfullname,
        usermobilenumber: userMobilenumber,
        useraddress: userAddress,
        orderId: orderId,
        userId: uid,
        userEmail: userEmail, 
        items: cart,
        totalAmount: calculateTotalAmount(cart),
        orderDate: new Date().toISOString(),
        isNew: true, // Set isNew property to true
        latitude: userLat, // Store user's latitude
        longitude: userLng  // Store user's longitude
    };
    
    const ordersRef = ref(database, `orders/${uid}/${orderId}`);
    await set(ordersRef, orderData);
    console.log('Order created:', orderData);
    
    // Update stock availability for each product in the cart
    await updateStockAvailability(cart);
}

async function updateUserLocation(uid, latitude, longitude) {
    const userRef = ref(database, `users/${uid}`);
    await update(userRef, {
        location: {
            latitude: latitude,
            longitude: longitude
        }
    });
}

async function updateStockAvailability(cart) {
    for (const productId in cart) {
        const productRef = ref(database, `products/${productId}`);
        const snapshot = await get(productRef);
        if (snapshot.exists()) {
            const productData = snapshot.val();
            const currentStock = productData.stockAvailable;
            const quantityOrdered = cart[productId].quantity;
            if (currentStock >= quantityOrdered) {
                const newStock = currentStock - quantityOrdered;
                await update(productRef, { stockAvailable: newStock });
                console.log(`Updated stock for product ${productId}: ${newStock}`);
            } else {
                console.error(`Insufficient stock for product ${productId}`);
            }
        } else {
            console.error(`Product ${productId} not found`);
        }
    }
}
function calculateTotalAmount(cart) {
    let total = 0;
    Object.values(cart).forEach(item => {
        total += item.originalPrice * item.quantity;
    });
    return total;
}
// Hide the total discount element
document.getElementById('totalDiscount').style.display = 'none';
// You can still calculate and use totalDiscount in your logic
function calculateTotalDiscount(cart) {
    let totalDiscount = 0;
    Object.values(cart).forEach(item => {
        totalDiscount += item.discount * item.quantity; // Assuming `item.discount` is the discount per item
    });
    return totalDiscount;
}
document.getElementById('scrollUpButton').addEventListener('click', function() {
    // Scroll up by 100 pixels (adjust the value as needed)
    window.scrollBy({
        top: 1000, // Scroll up
        behavior: 'smooth' // Smooth scrolling
    });
});
</script>
</body>
</html>



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DelightX</title>
    <link rel="stylesheet" href="css/style.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat+Alternates:wght@100;200;300;400;500;600;700;800;900&family=Montserrat:wght@100;200;300;400;500;600;700;800;900&family=Righteous&display=swap" rel="stylesheet">
    <style>
        body, html {
            height: 100%;
            font-family: "Montserrat", sans-serif;
        }
        .navbar-brand {
            font-family: "Righteous", sans-serif !important;
        }
        @media (min-width: 992px) {
            .bottom-nav {
                display: none; /* Hide bottom nav on larger screens */
            }
        }
        .search-container {
            margin-top: 10px;
            padding: 0 15px;
            position: relative; /* Position relative to contain suggestions */
        }
        .input-group {
            width: 100%;
        }
        .input-group-text {
            background-color: transparent;
            border: none;
        }
        .suggestions-container {
            background: rgba(255, 255, 255, 0.9);
            border: 1px solid #ccc;
            border-radius: 5px;
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            width: 100%;
            margin-top: 5px;
            display: none; /* Initially hidden */
            position: absolute; /* Position suggestions below input */
        }
        .suggestion-item {
            padding: 10px;
            cursor: pointer;
        }
        .suggestion-item:hover {
            background: rgba(0, 128, 0, 0.1); /* Highlight on hover */
        }
        .close-icon {
            cursor: pointer;
            display: none; /* Initially hidden */
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
        }
        .product-item {
            display: flex;
            align-items: center;
            margin: 5px 0;
        }
        .product-item img {
            width: 50px; /* Set a fixed size for product images */
            height: auto;
            margin-right: 10px;
        }
        .recent-searches {
            margin-top: 20px;
        }
        .recent-search-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .remove-icon {
            cursor: pointer;
            color: red;
            margin-left: 10px;
        }
        .random-products {
            margin-top: 20px;
        }
        .cart-controls {
            display: flex;
            align-items: center;
        }
        .quantity-button {
            border: 1px solid #ccc;
            padding: 5px;
            cursor: pointer;
            width: 30px;
            text-align: center;
        }
        .add-to-cart {
            margin-left: 10px;
        }
        .cart-controls {
    display: flex;
    align-items: center;
    margin-top: 10px;
}

.quantity-button {
    background-color: #007bff; /* Primary color */
    color: white;
    border: none;
    padding: 3px 6px; /* Reduced padding */
    cursor: pointer;
    border-radius: 4px;
    margin: 0 3px; /* Reduced margin */
    font-size: 14px; /* Smaller font size */
    transition: background-color 0.3s;
}

.quantity-button:hover {
    background-color: #0056b3; /* Darker shade on hover */
}

input[type="number"] {
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 3px; /* Reduced padding */
    text-align: center;
    width: 30px; /* Reduced width */
    font-size: 14px; /* Smaller font size */
}

.add-to-cart {
    background-color: #28a745; /* Success color */
    color: white;
    border: none;
    padding: 3px 6px; /* Reduced padding */
    cursor: pointer;
    border-radius: 4px;
    margin-left: 8px; /* Reduced margin */
    font-size: 14px; /* Smaller font size */
    transition: background-color 0.3s;
}

.add-to-cart:hover {
    background-color: #218838; /* Darker shade on hover */
}

    </style>
</head>
<body>
    <nav class="navbar navbar-light bg-light d-lg-none">
        <div class="container-fluid justify-content-between">
            <a class="navbar-brand" href="#">DelightX</a>
        </div>
    </nav>
    
    <div class="search-container">
        <div class="input-group">
            <form id="searchForm" class="d-flex nav-search" onsubmit="return false;">
                <span class="input-group-text bg-transparent border-end-0 search-icon">
                    <i class="fas fa-search"></i>
                </span>
                <input type="text" id="searchInput" class="form-control modern-search" placeholder="Search for products..." />
                <span id="closeSearch" class="close-icon" onclick="clearSearch()">&times;</span> <!-- Close button -->
            </form>
            <div id="suggestions" class="suggestions-container"></div> <!-- Suggestions below the input -->
        </div>
    </div>

    <div id="recentSearches" class="recent-searches container">
        <h5>Recent Searches</h5>
        <div id="recentSearchesList"></div>
    </div>

    <div id="selectedProduct" class="container random-products"></div>

    <div id="randomProducts" class="container random-products">
        <h5>Other Products You Might Like</h5>
        <div id="randomProductsList"></div>
    </div>

    <!-- Bottom Navigation for Mobile -->
    <nav class="navbar navbar-light bg-light fixed-bottom d-lg-none bottom-nav">
        <div class="container-fluid justify-content-around">
            <a class="nav-link text-center" href="#">
                <i class="fas fa-home fa-lg"></i>
                <div>Home</div>
            </a>
            <a class="nav-link text-center" href="DelightX-Profile.html">
                <i class="fas fa-user fa-lg"></i>
                <div>Profile</div>
            </a>
            <a class="nav-link text-center" href="#">
                <i class="fas fa-ellipsis-h fa-lg"></i>
                <div>More</div>
            </a>
            <a class="nav-link text-center" href="DelightX-Cart.html">
                <i class="fas fa-shopping-cart fa-lg"></i>
                <div>Cart</div>
            </a>
        </div>
    </nav>

    <script>
        let suggestionsContainer;
        let recentSearches = JSON.parse(localStorage.getItem('recentSearches')) || [];
        let isLoggedIn = true; // Change this based on your authentication logic

        const clearSearch = () => {
            searchInput.value = ''; // Clear the input
            closeSearch.style.display = 'none'; // Hide the close button
            suggestionsContainer.style.display = 'none'; // Hide suggestions
        };

        const displayRecentSearches = () => {
            const recentSearchesList = document.getElementById('recentSearchesList');
            recentSearchesList.innerHTML = ''; // Clear previous searches

            recentSearches.forEach(search => {
                const searchItem = document.createElement('div');
                searchItem.className = 'recent-search-item';
                searchItem.textContent = search;
                searchItem.onclick = () => {
                    searchInput.value = search;
                    filterProducts();
                };

                const removeIcon = document.createElement('span');
                removeIcon.className = 'remove-icon';
                removeIcon.innerHTML = '&times;';
                removeIcon.onclick = (e) => {
                    e.stopPropagation(); // Prevent triggering search
                    removeRecentSearch(search);
                };

                searchItem.appendChild(removeIcon);
                recentSearchesList.appendChild(searchItem);
            });
        };

        const removeRecentSearch = (search) => {
            recentSearches = recentSearches.filter(item => item !== search);
            localStorage.setItem('recentSearches', JSON.stringify(recentSearches));
            displayRecentSearches();
        };

        displayRecentSearches(); // Show recent searches on page load
    </script>
<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.0.2/firebase-app.js";
    import { getDatabase, ref, onValue } from "https://www.gstatic.com/firebasejs/9.0.2/firebase-database.js";

    const firebaseConfig = {
        apiKey: "AIzaSyBjZDiWXkOclw7RmmU31822nPuj9px1hSA",
        authDomain: "quickbuy-29329.firebaseapp.com",
        projectId: "quickbuy-29329",
        storageBucket: "quickbuy-29329.appspot.com",
        messagingSenderId: "956510631625",
        appId: "1:956510631625:web:678411a2530ef065b97f18"
    };

    const app = initializeApp(firebaseConfig);
    const database = getDatabase(app);

    let products = {};
    let selectedProduct = null;

    // Fetch products from Firebase
    const fetchProducts = () => {
        const productsRef = ref(database, 'products/'); // Adjust the path based on your structure
        onValue(productsRef, (snapshot) => {
            if (snapshot.exists()) {
                products = snapshot.val(); // Assume products are stored as an object
                displayRandomProducts(); // Show random products after fetching
            } else {
                console.log("No products available.");
            }
        }, (error) => {
            console.error(error);
        });
    };

    fetchProducts(); // Call the function to fetch products

    const searchInput = document.getElementById('searchInput');
  
    const closeSearch = document.getElementById('closeSearch');

    // Display suggestions based on input
    searchInput.addEventListener('input', () => {
        const searchTerm = searchInput.value.toLowerCase();
        if (searchTerm.length > 0) {
            const suggestions = Object.keys(products).filter(product => 
                product.toLowerCase().includes(searchTerm)
            );

            if (suggestions.length > 0) {
                suggestionsContainer.innerHTML = suggestions.map(suggestion => 
                    `<div class="suggestion-item" onclick="selectSuggestion('${suggestion}')">${suggestion}</div>`
                ).join('');
                suggestionsContainer.style.display = 'block'; // Show suggestions
                closeSearch.style.display = 'block'; // Show close button
            } else {
                suggestionsContainer.style.display = 'none'; // Hide suggestions if no match
            }
        } else {
            suggestionsContainer.style.display = 'none'; // Hide suggestions if input is empty
            closeSearch.style.display = 'none'; // Hide close button
        }
    });

    const selectSuggestion = (suggestion) => {
        searchInput.value = suggestion; // Fill input with selected suggestion
        filterProducts(); // Filter products based on suggestion
        closeSearch.style.display = 'none'; // Hide close button
    };

    const filterProducts = () => {
        const searchTerm = searchInput.value.toLowerCase();
        if (searchTerm) {
            recentSearches.push(searchTerm);
            localStorage.setItem('recentSearches', JSON.stringify(recentSearches));
            displayRecentSearches();
        }
        // Add filtering logic here if needed
    };

    function displayRandomProducts() {
        const randomProductsList = document.getElementById('randomProductsList');
        randomProductsList.innerHTML = ''; // Clear previous products

        // Randomly select a few products to display
        const productArray = Object.values(products);
        const randomSelection = productArray.sort(() => 0.5 - Math.random()).slice(0, 5); // Select 5 random products

        randomSelection.forEach((product, index) => {
            const item = document.createElement('div');
            item.className = 'product-item';
            item.innerHTML = `
                <img src="${product.imageURL}" alt="${product.productName}">
                <div>
                    <strong>${product.productName}</strong><br>
                    <small>Price: ₹${product.finalPrice} (${product.availability})</small>
                    <div class="cart-controls">
                        <button class="quantity-button" onclick="decreaseQuantity(${index})">-</button>
                        <input type="number" id="quantity-${index}" value="1" min="1" style="width: 40px; text-align: center;">
                        <button class="quantity-button" onclick="increaseQuantity(${index})">+</button>
                        <button class="add-to-cart" onclick="addToCart('${product.productName}', ${product.finalPrice}, ${index})">Add to Cart</button>
                    </div>
                </div>
            `;
            randomProductsList.appendChild(item);
        });
    }

    // Functions for quantity and cart actions
    window.increaseQuantity = function(index) {
        const quantityInput = document.getElementById(`quantity-${index}`);
        quantityInput.value = parseInt(quantityInput.value) + 1;
    };

    window.decreaseQuantity = function(index) {
        const quantityInput = document.getElementById(`quantity-${index}`);
        if (quantityInput.value > 1) {
            quantityInput.value = parseInt(quantityInput.value) - 1;
        }
    };

    window.addToCart = function(productName, productPrice, index) {
        const quantity = document.getElementById(`quantity-${index}`).value;
        alert(`Added ${quantity} of ${productName} to the cart at ₹${productPrice} each.`);
    };

</script>

</body>
</html>




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DelightX</title>
    <link rel="stylesheet" href="css/style.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat+Alternates:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Montserrat:ital,wght@0,100..900;1,100..900&family=Righteous&display=swap" rel="stylesheet">
    <style>
       
       body {
        background-color: #ffffff;
        font-family:  "Montserrat", sans-serif;
    }
    .navbar-brand {
font-family: "Righteous", sans-serif !important;
}
    button.qty-btn {
    width: 30px; /* Fixed width for buttons */
    margin: 5px; /* No margin between buttons */
    background-color: green; /* Green background for buttons */
    color: white; /* White text for buttons */
    border: none; /* Remove default border */
    border-radius: 4px; /* Optional: rounded corners */
    transition: background-color 0.2s; /* Smooth transition */
    
}
button.qty-btn:hover {
    background-color: darkgreen; /* Darker green on hover */
}
button.qty-btn:active {
    background-color: darkgreen; /* Keep darker green on click */
}
button.qty-btn:disabled {
    background-color: #4a4848; /* Disabled button color */
    cursor: not-allowed; /* Change cursor style */
}
        .card {
            border: none;
            border-radius: 12px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        .card-img-top {
            border-radius: 12px;
            object-fit: contain;
            height: 80px;
        }
        .total-price {
            font-size: 1rem;
            font-weight: bold;
            color: #007bff;
        }
        .delete-btn {
            cursor: pointer;
            color: red;
            font-size: 0.9rem;
        }
        .price-text {
            font-size: 0.9rem;
        }
        .bg-light-gray {
            background-color: #ffffff;
        }
        .section-title {
            font-weight: 600;
            color: #343a40;
        }
        .price-details {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            padding: 15px;
        }
        .discount-price, .total-amount {
            color: green;
            font-weight: bold;
        }
        .amount-value {
            color: rgb(0, 0, 0);
            font-weight: 600;
        }
        @media (max-width: 576px) {
            h2 {
                font-size: 1.5rem;
                text-align: center; /* Center title on mobile */
            }
            .total-price {
                font-size: 1rem;
            }
            .delete-btn {
                font-size: 1rem;
            }
            .card-img-top {
                height: 60px;
            }
            .price-details {
                padding: 10px; /* Adjust padding for mobile */
            }
            .scrollable-column {
                padding: 5px; /* Less padding for mobile */
            }
        }
        @media (max-width: 768px) {
           
        .desktop-nav, .mobile-nav {
            position: sticky;
            top: 0;
            z-index: 1000;
            background-color: #ffffff;
        }
        .scrollable-column {
            max-height: 60vh; /* Adjust height as needed */
            overflow-y: auto;
            overflow-x: hidden;
            padding: 10px; /* Add some padding for better spacing */
        }
        .price-details {
            position: sticky;
            top: 0;
            background-color: #ffffff; /* Ensure background color for sticky */
            padding: 15px;
            border-radius: 12px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        .pay-button {
            margin-bottom: 5%;
            font-size: 1rem; /* Larger font size */
            transition: background-color 0.3s; /* Smooth background color transition */
        }
        .pay-button:hover {
            background-color: #0056b3; /* Darker shade on hover */
        }
        }
        .delivery-message {
    opacity: 0;
    transform: translateY(20px); /* Move it slightly down */
    transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out; /* Smooth transition for both opacity and position */
    margin-bottom: 20px; /* Adjust the value as needed */
    visibility: hidden; /* Use visibility for better control */
}
.delivery-message.visible {
    opacity: 1;
    transform: translateY(0); /* Reset position */
    visibility: visible; /* Make it visible */
}
#totalDiscount {
    display: none; /* This hides the element */
}
.fade-in {
    opacity: 0;
    transition: opacity 0.2s ease-in;
}
.fade-in.show {
    opacity: 1;
}
.delivery-message {
    display: none; /* Initially hidden */
    opacity: 0;
    transition: opacity 0.10s ease-in;
}
.delivery-message.visible {
    opacity: 1; /* Fade in */
}
.pay-button {
            position: relative;
            overflow: hidden;
            background-color: #28a745; /* Initial button color */
            color: white; /* Button text color */
            transition: background-color 0.3s; /* Smooth color transition */
        }

        .truck {
            position: absolute;
            width: 50px;
            height: 30px;
            background: url('https://img.icons8.com/?size=100&id=hdEGQ3p5dYnh&format=png&color=000000') no-repeat center center;
            background-size: contain;
            bottom: 50%; /* Align to the middle */
            transform: translateY(50%); /* Center vertically */
            left: -60px; /* Start off-screen to the left */
            animation: none; /* Initial state */
        }

        @keyframes moveTruck {
            0% {
                left: -60px; /* Start off-screen */
            }
            100% {
                left: 100%; /* Move to the right off-screen */
            }
        }
    </style>

</head>
<body>

    <nav class="navbar navbar-light bg-light d-lg-none sticky-top">
        <div class="container-fluid justify-content-between">
            <a class="navbar-brand" href="#">DelightX</a>
        </div>
    </nav>
    
    <div class="offcanvas offcanvas-end offcanvas-full" tabindex="-1" id="searchOffcanvas" aria-labelledby="searchOffcanvasLabel">
        <div class="offcanvas-header">
            <h5 id="searchOffcanvasLabel">Search</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <input type="text" class="form-control" placeholder="Search for over 500 products" autofocus>
        </div>
    </div>
    
    <!-- Desktop Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light d-none d-lg-block sticky-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">DelightX</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="#">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">Profile</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="moreDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            More
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="moreDropdown">
                            <li><a class="dropdown-item" href="#">Settings</a></li>
                            <li><a class="dropdown-item" href="#">Help</a></li>
                        </ul>
                    </li>
                </ul>
                <form class="d-flex">
                    <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                    <button class="btn btn-outline-success me-2" type="submit">Search</button>
                    <button class="btn btn-outline-secondary" type="button" aria-label="Cart">
                        <i class="fa-solid fa-cart-shopping fa-bounce"></i>
                    </button>
                </form>
            </div>
        </div>
    </nav>
    
    <!-- Bottom Navigation for Mobile -->
    <nav class="navbar navbar-light bg-light fixed-bottom d-lg-none bottom-nav">
        <div class="container-fluid justify-content-around">
            <a class="nav-link text-center" href="DelightX-Home.html">
                <i class="fas fa-home fa-lg"></i>
                <div>Home</div>
            </a>
            <a class="nav-link text-center" href="DelightX-Profile.html">
                <i class="fas fa-user fa-lg"></i>
                <div>Profile</div>
            </a>
            <a class="nav-link text-center" href="#">
                <i class="fas fa-ellipsis-h fa-lg"></i>
                <div>More</div>
            </a>
            <a class="nav-link text-center" href="DelightX-Cart.html">
                <i class="fas fa-shopping-cart fa-lg"></i>
                <div>Cart</div>
            </a>
        </div>
    </nav>
    
<div class="container mt-3">
    <h2 class="text-left mb-4 section-title">Shopping Cart</h2>
    <div class="row">
        <div class="col-lg-8 col-md-12 scrollable-column" id="cartItemsContainer">
            <div id="cartItems" class="row"></div>
            <img id="illustratorImage" src="src/undraw_empty_cart_co35.svg" alt="No items in cart" style="display: none; width: 100%; max-width: 400px; margin: auto;">
        </div>
        
        <div class="col-lg-4 col-md-12">
            <div class="price-details">
                <h5 class="text-center">
                    <i class="fa-solid fa-angle-up fa-bounce" id="scrollUpButton" style="cursor: pointer;"></i>
                </h5>                
                <h5 class="text-center">Price Details</h5>
                <div class="mb-3">
                    <strong>Total Amount:</strong> <span id="totalAmount" class="amount-value">0.00</span>
                </div>
                <div class="mb-3">
                    <strong>Delivery Charge:</strong> <span id="deliveryCharge">0.00</span>
                </div>
                <div class="mb-3">
                <span id="totalDiscount">0.00</span>
                </div>                
                <div class="mb-3">
                    <strong>You Save:</strong> <span id="totalSavings">0.00</span>
                </div>
                <div id="deliveryMessage" class="delivery-message mb-2" style="display: none;">
                    Your order will be delivered to your address by <span id="deliveryTime"></span>.
                </div>
                <div class="text-center mb-5">
                    <button id="payButton" class="btn pay-button">
                        <span id="buttonText">Pay</span>
                        <div id="truck" class="truck" style="display: none;"></div>
                    </button>
                </div>         
            </div>
        </div>
    </div>
</div>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script type="module">
   import { initializeApp } from "https://www.gstatic.com/firebasejs/9.0.2/firebase-app.js";
import { getDatabase, ref, get, remove, set, update } from "https://www.gstatic.com/firebasejs/9.0.2/firebase-database.js";
import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.0.2/firebase-auth.js";
 const firebaseConfig = {
        apiKey: "AIzaSyC7IZ7BhQPOy7CfEQLuJTOxdrTybBZTFO8",
        authDomain: "delightx-in.firebaseapp.com",
        databaseURL: "https://delightx-in-default-rtdb.firebaseio.com",
        projectId: "delightx-in",
        storageBucket: "delightx-in.appspot.com",
        messagingSenderId: "554333595542",
        appId: "1:554333595542:web:d445cd0bea3f1483c21fb7"
    };
const app = initializeApp(firebaseConfig);
const database = getDatabase(app);
const auth = getAuth(app);

let currentUserUid = null; // Declare at the top level
let animationInterval;
onAuthStateChanged(auth, async (user) => {
    if (user) {
        currentUserUid = user.uid;
        console.log("User is logged in:", currentUserUid);
        await fetchCart(); // Fetch cart items after user logs in
    } else {
        console.log("User is not logged in. Redirecting to index.html.");
        window.location.href = "index.html"; 
    }
});
async function fetchCart() {
    if (!currentUserUid) {
        console.warn("User not logged in. Checking local storage for cart.");
        loadCartFromLocalStorage(); // Attempt to load cart from local storage
        return;
    }

    const cartRef = ref(database, `carts/${currentUserUid}`);
    const snapshot = await get(cartRef);
    if (snapshot.exists()) {
        const cart = snapshot.val();
        renderCart(cart); // Render the cart items
        storeCartInLocalStorage(cart); // Save cart to local storage
    } else {
        console.log("No cart data available in Firebase.");
        loadCartFromLocalStorage(); // Load from local storage if no data in Firebase
    }
}

// Function to load cart from local storage
function loadCartFromLocalStorage() {
    const cart = JSON.parse(localStorage.getItem(`cart_${currentUserUid}`));
    if (cart) {
        console.log("Loaded cart from local storage:", cart);
        renderCart(cart); // Render the cart from local storage
    } else {
        console.log("No cart found in local storage.");
        renderCart({}); // Render empty cart if no data found
    }
}

// Function to store cart in local storage
function storeCartInLocalStorage(cart) {
    localStorage.setItem(`cart_${currentUserUid}`, JSON.stringify(cart));
    console.log("Stored cart in local storage.");
}

function calculateFinalAmountWithDelivery(cart) {
    let total = 0;
    Object.values(cart).forEach(item => {
        total += parseFloat(item.finalPrice) * item.quantity;
    });

    // Delivery charge logic
    let deliveryCharge = 0;
    if (total < 500) {
        deliveryCharge = 49;
    } else if (total < 1000) {
        deliveryCharge = 39;
    } else if (total < 2000) {
        deliveryCharge = 29;
    }

    return total + deliveryCharge; // Add delivery charge
}


document.addEventListener("DOMContentLoaded", function () {
    const deliveryMessage = document.getElementById("deliveryMessage");
    const deliveryTime = document.getElementById("deliveryTime");
    function checkDeliveryTime() {
        const now = new Date();
        const hours = now.getHours();
        let delivery;
        if (hours >= 16) { // If time is 4 PM or later
            delivery = "tomorrow by 6 PM";
        } else {
            delivery = "today";
        }
        deliveryTime.textContent = delivery;
    }
    // Initial check for delivery time
    checkDeliveryTime();
    // Function to show the delivery message
function showDeliveryMessage() {
    setTimeout(() => {
        deliveryMessage.style.display = "block"; // Show message
        deliveryMessage.classList.add('visible'); // Add visible class for fade-in effect
    }, 2000); // Delay of 2 seconds
}
// Scroll effect
window.addEventListener('scroll', function () {
    const rect = deliveryMessage.getBoundingClientRect();
    const isVisible = rect.top <= window.innerHeight && rect.bottom >= 0;
    // Check if the delivery message is not yet displayed
    if (!isVisible && (rect.top <= window.innerHeight)) {
        showDeliveryMessage(); // Show message when user scrolls
    }
});
// Check if the delivery message is visible on page load
window.addEventListener('load', function () {
    const rect = deliveryMessage.getBoundingClientRect();
    // If it's already in the viewport
    if (rect.top <= window.innerHeight && rect.bottom >= 0) {
        showDeliveryMessage();
    }
});
});

document.getElementById('payButton').addEventListener('click', async () => {
    const button = document.getElementById('payButton');
    const buttonText = document.getElementById('buttonText');
    const truck = document.getElementById('truck');

    // Change button color to black and truck color to #1A5319
    button.style.backgroundColor = '#000000';
    button.style.color = 'white'; // Change text color for visibility
    truck.style.background = 'url("https://img.icons8.com/ios-filled/50/1A5319/truck.png") no-repeat center center';
    truck.style.backgroundSize = 'contain';

    // Show the truck and start animation
    truck.style.display = 'block';
    truck.style.animation = 'moveTruck 3s linear forwards'; // Move truck over 3 seconds

    // Disable the button and change text
    button.disabled = true;
    buttonText.textContent = 'Processing...'; // Change button text

    // Start the truck animation loop
    animationInterval = setInterval(() => {
        // Reset truck position to keep it moving
        truck.style.animation = 'none'; // Reset the animation
        truck.offsetHeight; // Trigger reflow to restart animation
        truck.style.animation = 'moveTruck 3s linear forwards'; // Start the animation again
    }, 3000); // Restart every 3 seconds

    const uid = auth.currentUser.uid;
    const userRef = ref(database, `users/${uid}`);
    const userSnapshot = await get(userRef);

    // Check if user data exists
    if (!userSnapshot.exists()) {
        alert('Your profile is incomplete. Please update your address and mobile number.');
        clearInterval(animationInterval); // Stop the animation
        truck.style.display = 'none'; // Hide the truck
        button.disabled = false; // Re-enable the button
        buttonText.textContent = 'Pay'; // Reset button text
        window.location.href = 'profile.html'; 
        return;
    }

    const userData = userSnapshot.val();
    console.log('User data:', userData); 

    // Check if user details are complete
    if (!userData.fullName || !userData.address || !userData.mobile) {
        alert('Please update your profile with your name, address, and mobile number.');
        clearInterval(animationInterval); // Stop the animation
        truck.style.display = 'none'; // Hide the truck
        button.disabled = false; // Re-enable the button
        buttonText.textContent = 'Pay'; // Reset button text
        window.location.href = 'profile.html'; 
        return;
    }

    const cartRef = ref(database, `carts/${uid}`);
    const snapshot = await get(cartRef);
    if (snapshot.exists()) {
        const cart = snapshot.val();
        
        // Check stock availability for each product in the cart
        const stockAvailability = await checkStockAvailability(cart);
        if (!stockAvailability) {
            alert(stockAvailability);
            clearInterval(animationInterval); // Stop the animation
            truck.style.display = 'none'; // Hide the truck
            button.disabled = false; // Re-enable the button
            buttonText.textContent = 'Pay'; // Reset button text
            return;
        }

        // Check if user selected quantity is greater than stock available
        const quantityCheck = await checkQuantity(cart);
        if (!quantityCheck) {
            alert('Sorry, the quantity you selected is greater than the stock available. Please try again later.');
            clearInterval(animationInterval); // Stop the animation
            truck.style.display = 'none'; // Hide the truck
            button.disabled = false; // Re-enable the button
            buttonText.textContent = 'Pay'; // Reset button text
            return;
        }

        // Calculate total amount including delivery charge
        const totalAmount = calculateFinalAmountWithDelivery(cart);

        // Prepare Razorpay payment options
        const options = {
            key: "rzp_test_XxEv4eXXqaPM4o", 
            amount: (totalAmount * 100).toFixed(0), 
            currency: "INR",
            name: "QuickBuy",
            description: "Your Order Description",
            handler: async function(response) {
                // Create order after successful payment
                await createOrder(cart);
                await removeAllCartItems();
                alert('Payment successful! Your cart has been cleared.');
                clearInterval(animationInterval); // Stop the animation
                truck.style.display = 'none'; // Hide the truck
                button.disabled = false; // Re-enable the button
                buttonText.textContent = 'Pay'; // Reset button text
            },
            prefill: {
                name: userData.fullName || "Customer Name",
                email: userData.email || "customer@example.com",
                contact: userData.mobile || "9999999999"
            },
            theme: {
                color: "#F37254"
            }
        };

        const razorpay = new Razorpay(options);
        razorpay.open();

        // Stop the truck animation when Razorpay opens
        clearInterval(animationInterval); // Clear the animation loop
        truck.style.animation = 'none'; // Stop the truck animation
        truck.style.display = 'none'; // Hide the truck
    } else {
        alert('Your cart is empty.');
        clearInterval(animationInterval); // Stop the animation
        truck.style.display = 'none'; // Hide the truck
        button.disabled = false; // Re-enable the button
        buttonText.textContent = 'Pay'; // Reset button text
    }
});
async function removeAllCartItems() {
    const cartRef = ref(database, `carts/${currentUserUid}`);
    try {
        await remove(cartRef);
        console.log('All items removed from cart.');
        localStorage.removeItem(`cart_${currentUserUid}`);
        fetchCart();
    } catch (error) {
        console.error('Error removing cart items:', error);
    }
}
async function checkStockAvailability(cart) {
    for (const productId in cart) {
        const productRef = ref(database, `products/${productId}`);
        const snapshot = await get(productRef);
        if (snapshot.exists()) {
            const productData = snapshot.val();
            const currentStock = productData.stockAvailable;
            const quantityOrdered = cart[productId].quantity;
            if (currentStock < quantityOrdered) {
                return `Sorry, the product ${productId} is out of stock. Please try again later.`; 
            }
        } else {
            return `Sorry, the product ${productId} does not exist. Please try again later.`; 
        }
    }
    return true; 
}
async function checkQuantity(cart) {
    for (const productId in cart) {
        const productRef = ref(database, `products/${productId}`);
        const snapshot = await get(productRef);
        if (snapshot.exists()) {
            const productData = snapshot.val();
            const currentStock = productData.stockAvailable;
            const quantityOrdered = cart[productId].quantity;
            if (quantityOrdered > currentStock) {
                return false;
            }
        } else {
            return false;
        }
    }
    return true;
}
async function renderCart(cart) {
    const cartItemsContainer = document.getElementById('cartItems');
    const totalAmountElement = document.getElementById('totalAmount');
    const totalMRPElement = document.getElementById('totalMRP');
    const totalDiscountElement = document.getElementById('totalDiscount');
    const totalSavingsElement = document.getElementById('totalSavings');
    const deliveryChargeElement = document.getElementById('deliveryCharge');
    const illustratorImage = document.getElementById('illustratorImage');
    cartItemsContainer.innerHTML = '';
    
    // Check if the cart is empty
    if (!cart || Object.keys(cart).length === 0) {
        illustratorImage.style.display = 'block'; // Show the image
        totalAmountElement.innerHTML = '<span class="amount-value">₹0.00</span>';
        deliveryChargeElement.innerHTML = 'Free Delivery'; // Set delivery charge to "Free Delivery"
        return; // Exit the function if the cart is empty
    } else {
        illustratorImage.style.display = 'none'; // Hide the illustrator image if not empty
    }

    let totalAmount = 0;
    let totalMRP = 0;
    let totalDiscount = 0;
    
    Object.entries(cart).forEach(([key, item]) => {
        const col = document.createElement('div');
        col.className = 'col-12 mb-3 bg-light-gray';
        const row = document.createElement('div');
        row.className = 'row align-items-center';
        const imgCol = document.createElement('div');
        imgCol.className = 'col-3';
        const img = document.createElement('img');
        img.src = item.imageURL;
        img.className = 'card-img-top';
        imgCol.appendChild(img);
        row.appendChild(imgCol);
        const nameQtyCol = document.createElement('div');
        nameQtyCol.className = 'col-5';
        const title = document.createElement('h6');
        title.className = 'card-title mb-0';
        title.textContent = item.productName;
        nameQtyCol.appendChild(title);

        // Create quantity controls
        const qtyCol = document.createElement('div');
        qtyCol.className = 'qty-controls';
        const decrementBtn = document.createElement('button');
        decrementBtn.textContent = '-';
        decrementBtn.className = 'qty-btn';
        decrementBtn.addEventListener('click', () => {
            if (item.quantity > 1) {
                item.quantity--;
                updateQtyDisplay();
                updateCart(item, key); // Pass the current item and its key
            }
        });
        const qtyDisplay = document.createElement('span');
        qtyDisplay.className = 'qty-display';
        qtyDisplay.textContent = item.quantity;
        const incrementBtn = document.createElement('button');
        incrementBtn.textContent = '+';
        incrementBtn.className = 'qty-btn';
        incrementBtn.addEventListener('click', () => {
            if (item.quantity < Math.min(item.availableQuantity, 5)) {
                item.quantity++;
                updateQtyDisplay();
                updateCart(item, key); // Pass the current item and its key
            }
        });
        qtyCol.appendChild(decrementBtn);
        qtyCol.appendChild(qtyDisplay);
        qtyCol.appendChild(incrementBtn);
        qtyCol.appendChild(document.createTextNode(` ${item.availableQuantity} ${item.qtyUnit}`));
        nameQtyCol.appendChild(qtyCol);
        row.appendChild(nameQtyCol);
        const priceCol = document.createElement('div');
        priceCol.className = 'col-2';
        const finalPrice = document.createElement('p');
        finalPrice.className = 'price-text';
        finalPrice.innerHTML = `₹${(item.finalPrice * item.quantity).toFixed(2)}`;
        priceCol.appendChild(finalPrice);
        row.appendChild(priceCol);
        const deleteCol = document.createElement('div');
        deleteCol.className = 'col-2 text-center';
        const deleteBtn = document.createElement('span');
        deleteBtn.innerHTML = '<i class="fas fa-trash"></i>';
        deleteBtn.className = 'delete-btn';
        deleteBtn.addEventListener('click', () => {
            removeCartItem(key);
        });
        deleteCol.appendChild(deleteBtn);
        row.appendChild(deleteCol);
        col.appendChild(row);
        cartItemsContainer.appendChild(col);
        const itemQuantity = parseInt(item.quantity);
        const itemFinalPrice = parseFloat(item.finalPrice);
        const itemOriginalPrice = parseFloat(item.originalPrice);
        totalAmount += itemFinalPrice * itemQuantity;
        totalMRP += itemOriginalPrice * itemQuantity;
        totalDiscount += (itemOriginalPrice - itemFinalPrice) * itemQuantity;

        /// Check stock availability every second
        const productId = key;
        const productRef = ref(database, `products/${productId}`);
        const stockCheckInterval = setInterval(async () => {
            const snapshot = await get(productRef);
            if (snapshot.exists()) {
                const productData = snapshot.val();
                const currentStock = productData.stockAvailable;
                item.availableQuantity = currentStock; // Update item available quantity
                // Update visual elements based on available stock
                checkQuantityLimit();
                if (currentStock <= 0) {
                    // Update image to black and white if stock is 0
                    col.style.textDecoration = 'line-through';
                    img.style.filter = 'grayscale(100%)';
                    img.style.opacity = '0.5';
                    incrementBtn.disabled = true; // Disable increment if out of stock
                } else {
                    // Reset image if stock is available
                    img.style.filter = '';
                    img.style.opacity = '';
                }
                // Check quantity limit
                checkQuantityLimit();
            }
        }, 1000); // Check every second
        
        function updateQtyDisplay() {
            qtyDisplay.textContent = item.quantity;
            finalPrice.innerHTML = `₹${(item.finalPrice * item.quantity).toFixed(2)}`;
            if (item.quantity > item.availableQuantity) {
                col.style.textDecoration = 'line-through'; // Strike through if quantity exceeds stock
            } else {
                col.style.textDecoration = ''; // Remove strike through if quantity is valid
                img.style.filter = ''; // Reset image color
                img.style.opacity = '';
            }
            // Recalculate totals and update delivery charge
            recalculateTotals();
        }

        function checkQuantityLimit() {
            if (item.quantity >= item.availableQuantity) {
                incrementBtn.disabled = true; // Disable increment button
                if (item.quantity > item.availableQuantity) {
                    col.style.textDecoration = 'line-through'; // Strike through if quantity exceeds stock
                }
            } else {
                incrementBtn.disabled = false; // Enable increment button
            }
        }
    });
    
    // Initial delivery charge logic
    recalculateTotals();

    // New function to recalculate totals and update the UI
function recalculateTotals() {
    let totalAmount = 0;
    let totalDiscount = 0; // Added to calculate total discount
    
    Object.values(cart).forEach(item => {
        totalAmount += parseFloat(item.finalPrice) * item.quantity;
        const itemOriginalPrice = parseFloat(item.originalPrice);
        totalDiscount += (itemOriginalPrice - item.finalPrice) * item.quantity; // Calculate discount
    });

    // Delivery charge logic
    let deliveryCharge = 0;
    if (totalAmount < 500) {
        deliveryCharge = 49;
    } else if (totalAmount < 1000) {
        deliveryCharge = 39;
    } else if (totalAmount < 2000) {
        deliveryCharge = 29;
    }

    // Update total amounts in the UI
    totalAmountElement.innerHTML = `<span class="amount-value"><span class="strike-through">₹${calculateTotalAmount(cart).toFixed(2)}</span> ₹${(totalAmount + deliveryCharge).toFixed(2)}</span>`;
    totalSavingsElement.innerHTML = `₹${totalDiscount.toFixed(2)}`;
    deliveryChargeElement.innerHTML = `₹${deliveryCharge}`; // Show the calculated delivery charge
}

// Update cart logic
function updateCart(item, key) {
    // Update Firebase with the current cart item
    const cartRef = ref(database, `carts/${currentUserUid}/${key}`);
    const updatedItem = { quantity: item.quantity }; // Create an object with only the updated quantity
    // Use update to only modify the quantity field
    update(cartRef, updatedItem)
        .then(() => {
            console.log('Quantity updated successfully');
        })
        .catch((error) => {
            console.error('Error updating quantity:', error);
        });
}

// CSS for the animation and button styling
const style = document.createElement('style');
style.innerHTML = `
    .strike-through {
        animation: strikeThrough 1s forwards;
    }
    @keyframes strikeThrough {
        from {
            opacity: 1;
        }
        to {
            opacity: 0.5;
            text-decoration: line-through;
        }
    }
    .qty-btn {
        margin: 0 5px;
        padding: 2px 5px; /* Reduced padding for smaller size */
        cursor: pointer;
        font-size: 16px; /* Adjust font size */
        border: 1px solid #ccc; /* Add border for better visibility */
        border-radius: 4px; /* Rounded corners */
        background-color: #f0f0f0; /* Background color */
        transition: background-color 0.2s; /* Smooth transition */
    }
    .qty-btn:hover {
        background-color: #e0e0e0; /* Change color on hover */
    }
    .qty-btn:disabled {
        background-color: #ddd; /* Disabled button color */
        cursor: not-allowed; /* Change cursor style */
    }
`;
document.head.appendChild(style);
}


async function removeCartItem(productId) {
    const cartRef = ref(database, `carts/${currentUserUid}`); // Use currentUserUid instead of currentUserId
    try {
        const snapshot = await get(cartRef);
        if (snapshot.exists()) {
            const cart = snapshot.val();
            delete cart[productId];
            await set(cartRef, cart);
            console.log('Item removed:', productId);
            storeCartInLocalStorage(cart);
            fetchCart();
        }
    } catch (error) {
        console.error('Error deleting item:', error);
    }
}


function getStoredLocation() {
    const storedData = localStorage.getItem("userLocation");
    if (storedData) {
        const locationData = JSON.parse(storedData);
        const currentTime = Date.now();

        if (currentTime - locationData.timestamp < 3600000) {
            return {
                latitude: locationData.latitude,
                longitude: locationData.longitude,
            };
        } else {
            localStorage.removeItem("userLocation");
        }
    }
    return null;
}

async function createOrder(cart) {
    const uid = auth.currentUser.uid;
    
    // Fetch user data to get the email and other details
    const userSnapshot = await get(ref(database, `users/${uid}`));
    const userData = userSnapshot.val();
    const userEmail = userData.email; 
    const userfullname = userData.fullName; 
    const userMobilenumber = userData.mobile;
    const userAddress = userData.address;  

    // Fetch user's location using the getStoredLocation function
    const userLocation = getStoredLocation();
    const userLat = userLocation ? userLocation.latitude : null;
    const userLng = userLocation ? userLocation.longitude : null;

    const orderId = `order_${uid}_${Date.now()}_${Math.floor(Math.random() * 10000)}`; 
    const orderData = {
        userName: userfullname,
        usermobilenumber: userMobilenumber,
        useraddress: userAddress,
        orderId: orderId,
        userId: uid,
        userEmail: userEmail, 
        items: cart,
        totalAmount: calculateTotalAmount(cart),
        orderDate: new Date().toISOString(),
        isNew: true, // Set isNew property to true
        latitude: userLat, // Store user's latitude
        longitude: userLng  // Store user's longitude
    };
    
    const ordersRef = ref(database, `orders/${uid}/${orderId}`);
    await set(ordersRef, orderData);
    console.log('Order created:', orderData);
    
    // Update stock availability for each product in the cart
    await updateStockAvailability(cart);
}

async function updateUserLocation(uid, latitude, longitude) {
    const userRef = ref(database, `users/${uid}`);
    await update(userRef, {
        location: {
            latitude: latitude,
            longitude: longitude
        }
    });
}

async function updateStockAvailability(cart) {
    for (const productId in cart) {
        const productRef = ref(database, `products/${productId}`);
        const snapshot = await get(productRef);
        if (snapshot.exists()) {
            const productData = snapshot.val();
            const currentStock = productData.stockAvailable;
            const quantityOrdered = cart[productId].quantity;
            if (currentStock >= quantityOrdered) {
                const newStock = currentStock - quantityOrdered;
                await update(productRef, { stockAvailable: newStock });
                console.log(`Updated stock for product ${productId}: ${newStock}`);
            } else {
                console.error(`Insufficient stock for product ${productId}`);
            }
        } else {
            console.error(`Product ${productId} not found`);
        }
    }
}
function calculateTotalAmount(cart) {
    let total = 0;
    Object.values(cart).forEach(item => {
        total += item.originalPrice * item.quantity;
    });
    return total;
}
// Hide the total discount element
document.getElementById('totalDiscount').style.display = 'none';
// You can still calculate and use totalDiscount in your logic
function calculateTotalDiscount(cart) {
    let totalDiscount = 0;
    Object.values(cart).forEach(item => {
        totalDiscount += item.discount * item.quantity; // Assuming `item.discount` is the discount per item
    });
    return totalDiscount;
}
document.getElementById('scrollUpButton').addEventListener('click', function() {
    // Scroll up by 100 pixels (adjust the value as needed)
    window.scrollBy({
        top: 1000, // Scroll up
        behavior: 'smooth' // Smooth scrolling
    });
});

</script>
<script>
    
</script>
</body>
</html>